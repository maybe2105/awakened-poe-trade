#Requires AutoHotkey v2.0
#HotIf WinActive("Path of Exile")

imageMap := Map()
Base64DictWriter()


;; ##################################################################################################
;; CONFIGURATION
;; ##################################################################################################

; Comment out lines below to disable icons for specific Kirac missions.

imageMap["Harvest"]             := A_Temp "\Kirac\harvest.png"
imageMap["Beast"]               := A_Temp "\Kirac\beast.png"
imageMap["Abyss"]               := A_Temp "\Kirac\abyss.png"
imageMap["Excursions"]          := A_Temp "\Kirac\alva.png"
imageMap["Expedition"]          := A_Temp "\Kirac\expedition.png"
imageMap["Unique item"]         := A_Temp "\Kirac\unique.png"
imageMap["Essences"]            := A_Temp "\Kirac\essence.png"
imageMap["Rituals"]             := A_Temp "\Kirac\ritual.png"
imageMap["Smuggler"]            := A_Temp "\Kirac\smuggler.png"
imageMap["Vaal Side"]           := A_Temp "\Kirac\corruptedarea.png"
imageMap["Map"]                 := A_Temp "\Kirac\map.png"
imageMap["Ultimatum"]           := A_Temp "\Kirac\ultimatum.png"
imageMap["Legion"]              := A_Temp "\Kirac\legion.png"
imageMap["Harbinger"]           := A_Temp "\Kirac\harbinger.png"
imageMap["Delirium"]            := A_Temp "\Kirac\delirium.png"
imageMap["Rogue"]               := A_Temp "\Kirac\rogueexile.png"
imageMap["corrupted monsters"]  := A_Temp "\Kirac\corruptedmonster.png"
imageMap["Blight"]              := A_Temp "\Kirac\blight.png"
imageMap["Elder"]               := A_Temp "\Kirac\elderguardian.png"
imageMap["Shaper"]              := A_Temp "\Kirac\shaperguardian.png"
imageMap["Labyrinth"]           := A_Temp "\Kirac\lab.png"
imageMap["Breaches"]            := A_Temp "\Kirac\breach.png"
imageMap["Strongbox"]           := A_Temp "\Kirac\strongbox.png"
imageMap["Einhar"]              := A_Temp "\Kirac\beast.png"
imageMap["Shrine"]              := A_Temp "\Kirac\shrine.png"
imageMap["Exiles"]              := A_Temp "\Kirac\rogueexile.png"

; ##############################################
; SLEEP DELAY
; ##############################################

; Set Delay (milliseconds) between each mouse move to allow UI to update
; Depending on your system speed, the OCR delay may be large enough to not require this. 
; Default = 30

sleepDelay := 30


; ##############################################
; HOTKEY CONFIG
; ##############################################

; Set Launch Hotkey. Different defaults can be commented/uncommented, or changed to your preference.
; Examples: 
;    Home::Kirac()    ; Home key
;    ^K::Kirac()      ; Ctrl+K
;    ^!K::Kirac()     ; Ctrl+Alt+K

\::Kirac()



;; ##################################################################################################
;; END CONFIGURATION
;; ##################################################################################################


Kirac() {

    local guiX

    WinGetPos(&xw, &yw, &ww, &hw, "A")

    ; item grid size is roughly 1/20.5714 of the height of the window. Tested at 1440p, 1200p, 1080p. All other variables should scale with this.
    gridSize := hw / 20.5714 
    gridIndex := 0

    kiracStartX := ww / 2 - (gridSize * 2) + (gridSize * 0.2)
    kiracStartY := hw / 2 + (gridSize * 0.2) - (gridSize * 3) + (gridSize * 0.2)

    ; is inventory open? I really hope no one has a weird resolution...
    invBitmap := CaptureRegionToBitmap((ww - gridSize * 12), gridSize, gridSize * 3, gridSize)
    if OCR.FromBitmap(invBitmap).Text {
        kiracStartX -= 2 * gridSize
    }

    kiracToolbarX := kiracStartX - gridSize
    img_size := gridSize * 0.8

    arx := []

    guiX := Gui("+LastFound -Caption +AlwaysOnTop +ToolWindow -Border")
    guiX.BackColor := "Black"
    hwnd := guiX.Hwnd

    BlockInput("On")

    MouseGetPos(&mouseStartX, &mouseStartY)

    y_index := 0
    Loop 4 {
        y := kiracStartY + gridSize * y_index
        x_index := 0
        Loop 4 {
            x := kiracStartX + gridSize * x_index
            x_index++
            
            MouseMove(x, y, 0)
            Sleep(sleepDelay) ; Allow GUI to update
            hBitmap := CaptureRegionToBitmap(kiracToolbarX, kiracStartY + gridSize * 6, gridSize * 6, gridSize * 2)
            
            result := OCR.FromRect(kiracToolbarX, kiracStartY + gridSize * 6, gridSize * 6, gridSize * 2)
            txt := result.Text

            if !txt {
                break 2
            }

            imageResult := MapOCRTextToImage(txt)

            mechanic := imageResult[1]
            foundImage := imageResult[2]

            x_imgPos := x + (gridSize * 0.3)
            y_imgPos := y + (gridSize * 0.3)


            if foundImage {
                guiX.Add("Picture", "x" x_imgPos " y" y_imgPos " w" img_size " h" img_size, foundImage)
                
                ; Add green rectangle border if the found image is "Beast"
                if (mechanic = "Einhar") {


                    borderWidth := 2

                    gridX := x - 8
                    gridY := y - 8

                    ; Top border
                    guiX.Add("Text", "x" gridX " y" (gridY - borderWidth - 4) " w" gridSize " h" borderWidth " Background0x00FF00")
                    ; Bottom border
                    guiX.Add("Text", "x" gridX " y" (gridY + gridSize - 4) " w" gridSize " h" borderWidth " Background0x00FF00")
                    ; Left border
                    guiX.Add("Text", "x" (gridX - borderWidth) " y" (gridY - 4) " w" borderWidth " h" gridSize " Background0x00FF00")
                    ; Right border
                    guiX.Add("Text", "x" (gridX + gridSize) " y" (gridY - 4) " w" borderWidth " h" gridSize " Background0x00FF00")
                }
            }
        }
        y_index++
    }
    MouseMove(mouseStartX, mouseStartY, 0)

    guiX.Show("x0 y0 NoActivate")
    WinSetTransColor("Black", hwnd)
    KeyWaitAnyMouseOrKeyboard()
    guiX.Destroy()

    BlockInput("Off")
}

MapOCRTextToImage(txt) {
    global imageMap
    for keyword, path in imageMap {
        if InStr(txt, keyword)
            return [keyword, path] ; return tuple (Array) with keyword and path
    }
    return ["", ""] ; fallback if nothing matched
}

KeyWaitAnyMouseOrKeyboard() {
    Loop {
        Sleep(50)
        if GetKeyState("LButton", "P") || GetKeyState("RButton", "P") || GetKeyState("MButton", "P")
            break
        if GetKeyState("XButton1", "P") || GetKeyState("XButton2", "P")
            break
        Loop 255 {
            vk := A_Index
            key := "vk" Format("{:02X}", vk)
            if GetKeyState(key, "P") {
                break 2
            }
        }
    }
}

FastHBitmapFromScreen(x, y, w, h) {
    static hdcScreen := DllCall("GetDC", "Ptr", 0, "Ptr")
    hdcMem := DllCall("gdi32.dll\CreateCompatibleDC", "Ptr", hdcScreen, "Ptr")
    hbm := DllCall("gdi32.dll\CreateCompatibleBitmap", "Ptr", hdcScreen, "Int", w, "Int", h, "Ptr")

    old := DllCall("gdi32.dll\SelectObject", "Ptr", hdcMem, "Ptr", hbm, "Ptr")
    DllCall("gdi32.dll\BitBlt"
        , "Ptr", hdcMem
        , "Int", 0, "Int", 0
        , "Int", w, "Int", h
        , "Ptr", hdcScreen
        , "Int", x, "Int", y
        , "UInt", 0x00CC0020)  ; SRCCOPY

    DllCall("gdi32.dll\SelectObject", "Ptr", hdcMem, "Ptr", old)
    DllCall("gdi32.dll\DeleteDC", "Ptr", hdcMem)

    return hbm
}

CaptureRegionToBitmap(x, y, w, h) {
    return FastHBitmapFromScreen(x, y, w, h)
}



;; ##################################################################################################
;; ##################################################################################################
;; ##################################################################################################
;; ##################################################################################################

;; Base64 Images for Kirac icons
;; I should have just left it as a folder of icons, this was annoying...


Base64DictWriter() {

    b64Map := Map()

    b64Map["abyss"] := ""
    b64Map["alva"] := ""
    b64Map["armour"] := ""
    b64Map["beast"] := ""
    b64Map["blight"] := ""
    b64Map["breach"] := ""
    b64Map["corruptedarea"] := ""
    b64Map["corruptedmonster"] := ""
    b64Map["currency"] := ""
    b64Map["delirium"] := ""
    b64Map["delve"] := "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"
    b64Map["divination"] := ""
    b64Map["elderguardian"] := "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"
    b64Map["essence"] := ""
    b64Map["expedition"] := ""
    b64Map["fragment"] := "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"
    b64Map["gem"] := "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"
    b64Map["harbinger"] := ""
    b64Map["harvest"] := ""
    b64Map["lab"] := "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"
    b64Map["legion"] := "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"
    b64Map["map"] := ""
    b64Map["ritual"] := ""
    b64Map["rogueexile"] := ""
    b64Map["shaperguardian"] := "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"
    b64Map["shrine"] := ""
    b64Map["smuggler"] := ""
    b64Map["strongbox"] := ""
    b64Map["torment"] := "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"
    b64Map["ultimatum"] := ""
    b64Map["unique"] := "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"

    for keyword, b64Text in b64Map {
        WriteBase64ToTempFile(b64Text, keyword)
    }

}


WriteBase64ToTempFile(base64, fileName) {
    tempDir := A_Temp "\Kirac"
    tempPath := tempDir "\" fileName ".png"
    if !DirExist(tempDir)
        DirCreate(tempDir)

    ; Decode Base64 to binary image
    DllCall("Crypt32\CryptStringToBinaryW"
        , "Str", base64
        , "UInt", StrLen(base64)
        , "UInt", 1  ; Base64
        , "Ptr", 0
        , "UIntP", &binSize := 0
        , "Ptr", 0
        , "Ptr", 0)
    bin := Buffer(binSize)
    DllCall("Crypt32\CryptStringToBinaryW"
        , "Str", base64
        , "UInt", StrLen(base64)
        , "UInt", 1
        , "Ptr", bin
        , "UIntP", &binSize
        , "Ptr", 0
        , "Ptr", 0)

    ; Write binary image to temp file
    FileOpen(tempPath, "rw").RawWrite(bin)
    return tempPath
}




;; ##################################################################################################
;; ##################################################################################################
;; ##################################################################################################
;; ##################################################################################################

;; OCR Library Copied from https://github.com/Descolada/OCR 
;; If you're not comfortable with the giant class below, you can download the original from the link
;; and simply add a `#Include OCR.ahk` line to the top of this file.

;; ##################################################################################################
;; ##################################################################################################
;; ##################################################################################################
;; ##################################################################################################


class OCR {
    static IID_IRandomAccessStream := "{905A0FE1-BC53-11DF-8C49-001E4FC686DA}"
         , IID_IPicture            := "{7BF80980-BF32-101A-8BBB-00AA00300CAB}"
         , IID_IAsyncInfo          := "{00000036-0000-0000-C000-000000000046}"
         , IID_IAsyncOperation_OcrResult        := "{c7d7118e-ae36-59c0-ac76-7badee711c8b}"
         , IID_IAsyncOperation_SoftwareBitmap   := "{c4a10980-714b-5501-8da2-dbdacce70f73}"
         , IID_IAsyncOperation_BitmapDecoder    := "{aa94d8e9-caef-53f6-823d-91b6e8340510}"
         , IID_IAsyncOperationCompletedHandler_OcrResult        := "{989c1371-444a-5e7e-b197-9eaaf9d2829a}"
         , IID_IAsyncOperationCompletedHandler_SoftwareBitmap   := "{b699b653-33ed-5e2d-a75f-02bf90e32619}"
         , IID_IAsyncOperationCompletedHandler_BitmapDecoder    := "{bb6514f2-3cfb-566f-82bc-60aabd302d53}"
         , IID_IPdfDocumentStatics := "{433A0B5F-C007-4788-90F2-08143D922599}"
         , Vtbl_GetDecoder := {bmp:6, jpg:7, jpeg:7, png:8, tiff:9, gif:10, jpegxr:11, ico:12}
         , PerformanceMode := 0
         , DisplayImage := 0

    class IBase {
        __OCR := OCR
        __New(ptr?) {
            if IsSet(ptr) {
                if !ptr
                    throw ValueError('Invalid IUnknown interface pointer', -2, this.__Class)
                else if IsObject(ptr) {
                    if ptr.HasProp("Relative")
                        this.DefineProp("Relative", {value: ptr.Relative})
                    ptr := 0
                }
            }
            this.DefineProp("ptr", {Value:ptr ?? 0})
        }
        __Delete() => this.ptr ? ObjRelease(this.ptr) : 0
    }

    static __New() {
        this.LanguageFactory := this.CreateClass("Windows.Globalization.Language", ILanguageFactory := "{9B0252AC-0C27-44F8-B792-9793FB66C63E}")
        this.SoftwareBitmapFactory := this.CreateClass("Windows.Graphics.Imaging.SoftwareBitmap", "{c99feb69-2d62-4d47-a6b3-4fdb6a07fdf8}")
        this.BitmapTransform := this.CreateClass("Windows.Graphics.Imaging.BitmapTransform")
        this.BitmapDecoderStatics := this.CreateClass("Windows.Graphics.Imaging.BitmapDecoder", IBitmapDecoderStatics := "{438CCB26-BCEF-4E95-BAD6-23A822E58D01}")
        this.BitmapEncoderStatics := this.CreateClass("Windows.Graphics.Imaging.BitmapEncoder", IBitmapDecoderStatics := "{a74356a7-a4e4-4eb9-8e40-564de7e1ccb2}")
        this.SoftwareBitmapStatics := this.CreateClass("Windows.Graphics.Imaging.SoftwareBitmap", ISoftwareBitmapStatics := "{df0385db-672f-4a9d-806e-c2442f343e86}")
        this.OcrEngineStatics := this.CreateClass("Windows.Media.Ocr.OcrEngine", IOcrEngineStatics := "{5BFFA85A-3384-3540-9940-699120D428A8}")
        ComCall(6, this.OcrEngineStatics, "uint*", &MaxImageDimension:=0)   ; MaxImageDimension
        this.MaxImageDimension := MaxImageDimension
        DllCall("Dwmapi\DwmIsCompositionEnabled", "Int*", &compositionEnabled:=0)
        this.CAPTUREBLT := compositionEnabled ? 0 : 0x40000000
        /*  // Based on code by AHK forums user Xtra
            unsigned int Convert_GrayScale(unsigned int bitmap[], unsigned int w, unsigned int h, unsigned int Stride)
            {
                unsigned int a, r, g, b, gray, ARGB;
                unsigned int x, y, offset = Stride/4;
                for (y = 0; y < h * offset; y += offset) {
                    for (x = 0; x < w; ++x) {
                        ARGB = bitmap[x+y];
                        a = ARGB & 0xFF000000;
                        r = (ARGB & 0x00FF0000) >> 16;
                        g = (ARGB & 0x0000FF00) >> 8;
                        b = (ARGB & 0x000000FF);
                        gray = ((300 * r) + (590 * g) + (110 * b)) >> 10;
                        bitmap[x+y] = (gray << 16) | (gray << 8) | gray | a;
                    }
                }
                return 0;
            }
         */
        this.GrayScaleMCode := this.MCode((A_PtrSize = 4) 
        ? "2,x86:VVdWU4PsCIt8JCiLdCQki0QkIMHvAg+v94k0JIX2dH+FwHR7jTS9AAAAAIl0JASLdCQcjRyGMfaNtCYAAAAAkItEJByNDLCNtCYAAAAAZpCLEYPBBInQD7buwegQae1OAgAAD7bAacAsAQAAAegPtuqB4gAAAP9r7W4B6MHoConFCcLB4AjB5RAJ6gnQiUH8Odl1vAH+A1wkBDs0JHKhg8QIMcBbXl9dww==" 
        : "2,x64:V1ZTQcHpAkSJxkiJy0GJ00EPr/GF9nRnRTHAhdJ0YJBEicEPH0QAAInIg8EBTI0Ug0GLEonQD7b+wegQaf9OAgAAD7bAacAsAQAAAfgPtvqB4gAAAP9r/24B+MHoConHCcLB4AjB5xAJ+gnCQYkSRDnZdbRFAchFActBOfByoTHAW15fww==")
        /*
            unsigned int Invert_Colors(unsigned int bitmap[], unsigned int w, unsigned int h, unsigned int Stride)
            {
                unsigned int a, r, g, b, gray, ARGB;
                unsigned int x, y, offset = Stride/4;
                for (y = 0; y < h * offset; y += offset) {
                    for (x = 0; x < w; ++x) {
                        ARGB = bitmap[x+y];
                        a = ARGB & 0xFF000000;
                        r = (ARGB & 0x00FF0000) >> 16;
                        g = (ARGB & 0x0000FF00) >> 8;
                        b = (ARGB & 0x000000FF);
                        bitmap[x+y] = ((255-r) << 16) | ((255-g) << 8) | (255-b) | a;
                    }
                }
                return 0;
            }
        */
        this.InvertColorsMCode := this.MCode((A_PtrSize = 4)
        ? "2,x86:VVdWU4PsCItsJCiLfCQki0QkIMHtAg+v/Yk8JIX/dGeFwHRjjTytAAAAAIl8JASLfCQcjTSHMf+NtCYAAAAAkItEJByNDLiNtCYAAAAAZpCLEYPBBInQidOB4v8AAP/30PfTgPL/JQAA/wCB4wD/AAAJ2AnQiUH8OfF11AHvA3QkBDs8JHK5g8QIMcBbXl9dww=="
        : "2,x64:V1ZTQcHpAkSJx0iJzonTQQ+v+YX/dFNFMcCF0nRMZpBEicEPH0QAAInIg8EBTI0chkGLE4nQQYnSgeL/AAD/99BB99KA8v8lAAD/AEGB4gD/AABECdAJ0EGJAznLdclFAchEActBOfhytjHAW15fww==")
        /*
            unsigned int Convert_Monochrome(unsigned int bitmap[], unsigned int w, unsigned int h, unsigned int Stride, unsigned int threshold)
            {
                unsigned int a, r, g, b, ARGB;
                unsigned int x, y, offset = Stride / 4;
                for (y = 0; y < h * offset; y += offset) {
                    for (x = 0; x < w; ++x) {
                        ARGB = bitmap[x + y];
                        a = ARGB & 0xFF000000;
                        r = (ARGB & 0x00FF0000) >> 16;
                        g = (ARGB & 0x0000FF00) >> 8;
                        b = (ARGB & 0x000000FF);
                        unsigned int luminance = (77 * r + 150 * g + 29 * b) >> 8;
                        bitmap[x + y] = (luminance > threshold) ? 0xFFFFFFFF : 0xFF000000;
                    }
                }
                return 0;
            }
        */
        this.MonochromeMCode := this.MCode((A_PtrSize = 4)
        ? "2,x86:VVdWU4PsDIt0JCyLTCQoi0QkJIt8JDDB7gIPr86JNCSJTCQEhcl0aYXAdGXB5gIx7Yl0JAiLdCQgjTSGjXQmAItEJCCNDKiNtCYAAAAAZpCLEYnTD7bGD7bSwesQacCWAAAAD7bba9Ida9tNAdgB0MHoCDn4dinHAf////+DwQQ58XXMAywkA3QkCDlsJAR3r4PEDDHAW15fXcONdCYAkMcBAAAA/4PBBDnxdaMDLCQDdCQIOWwkBHeG69U="
        : "2,x64:VVdWU4t0JEhBwekCRInHSInLQYnTQQ+v+YX/dFyF0nRYRTHADx9AAESJwQ8fRAAAichMjRSDQYsSidUPtsYPttLB7RBpwJYAAABAD7bta9Ida+1NAegB0MHoCDnwdiGDwQFBxwL/////QTnLdcJFAchFActEOcd3rzHAW15fXcODwQFBxwIAAAD/RDnZdaFFAchFActEOcd3juvd")
    }

    /**
     * Returns an OCR results object for an IRandomAccessStream.
     * Images of other types should be first converted to this format (eg from file, from bitmap).
     * @param RandomAccessStreamOrSoftwareBitmap Pointer or an object containing a ptr to a RandomAccessStream or SoftwareBitmap
     * @param {String} lang OCR language. Default is first from available languages.
     * @param {Integer|Object} transform Either a scale factor number, or an object {scale:Float, grayscale:Boolean, invertcolors:Boolean, monochrome:0-255, rotate: 0 | 90 | 180 | 270, flip: 0 | "x" | "y"}
     * @param {String} decoder Optional bitmap codec name to decode RandomAccessStream. Default is automatic detection.
     *  Possible values are gif, ico, jpeg, jpegxr, png, tiff, bmp.
     * @returns {OCR.Result} 
     */
    static Call(RandomAccessStreamOrSoftwareBitmap, Options:=0) {
        local SoftwareBitmap := 0, RandomAccessStream := 0, lang:="FirstFromAvailableLanguages", width, height, x := 0, y := 0, w := 0, h := 0, scale, grayscale, invertcolors, monochrome, OcrResult := this.Result(), Result, transform := 0, decoder := 0
        this.__ExtractTransformParameters(Options, &transform)
        scale := transform.scale, grayscale := transform.grayscale, invertcolors := transform.invertcolors, monochrome := transform.monochrome, rotate := transform.rotate, flip := transform.flip
        this.__ExtractNamedParameters(Options, "x", &x, "y", &y, "w", &w, "h", &h, "language", &lang, "lang", &lang, "decoder", &decoder)
        this.LoadLanguage(lang)
        local customRegion := x || y || w || h

        try SoftwareBitmap := ComObjQuery(RandomAccessStreamOrSoftwareBitmap, "{689e0708-7eef-483f-963f-da938818e073}") ; ISoftwareBitmap
        if SoftwareBitmap {
            ComCall(8, SoftwareBitmap, "uint*", &width:=0)   ; get_PixelWidth
            ComCall(9, SoftwareBitmap, "uint*", &height:=0)   ; get_PixelHeight
            this.ImageWidth := width, this.ImageHeight := height
            if (Floor(width*scale) > this.MaxImageDimension) or (Floor(height*scale) > this.MaxImageDimension)
               throw ValueError("Image is too big - " width "x" height ".`nIt should be maximum - " this.MaxImageDimension " pixels (with scale applied)")
            if scale != 1 || customRegion || rotate || flip
                SoftwareBitmap := this.TransformSoftwareBitmap(SoftwareBitmap, &width, &height, scale, rotate, flip, x?, y?, w?, h?)
            goto SoftwareBitmapCommon
        }
        RandomAccessStream := RandomAccessStreamOrSoftwareBitmap

        if decoder {
            ComCall(this.Vtbl_GetDecoder.%decoder%, this.BitmapDecoderStatics, "ptr", DecoderGUID:=Buffer(16))
            ComCall(15, this.BitmapDecoderStatics, "ptr", DecoderGUID, "ptr", RandomAccessStream, "ptr*", BitmapDecoder:=ComValue(13,0))   ; CreateAsync
        } else
            ComCall(14, this.BitmapDecoderStatics, "ptr", RandomAccessStream, "ptr*", BitmapDecoder:=ComValue(13,0))   ; CreateAsync
            this.WaitForAsync(&BitmapDecoder)

        BitmapFrame := ComObjQuery(BitmapDecoder, IBitmapFrame := "{72A49A1C-8081-438D-91BC-94ECFC8185C6}")
        ComCall(12, BitmapFrame, "uint*", &width:=0)   ; get_PixelWidth
        ComCall(13, BitmapFrame, "uint*", &height:=0)   ; get_PixelHeight
        if (width > this.MaxImageDimension) or (height > this.MaxImageDimension)
           throw ValueError("Image is too big - " width "x" height ".`nIt should be maximum - " this.MaxImageDimension " pixels")

        BitmapFrameWithSoftwareBitmap := ComObjQuery(BitmapDecoder, IBitmapFrameWithSoftwareBitmap := "{FE287C9A-420C-4963-87AD-691436E08383}")
        OcrResult.ImageWidth := width, OcrResult.ImageHeight := height
        if !(customRegion || rotate || flip) && (width < 40 || height < 40 || scale != 1) {
            scale := scale = 1 ? 40.0 / Min(width, height) : scale
            ComCall(7, this.BitmapTransform, "int", width := Floor(width*scale)) ; put_ScaledWidth
            ComCall(9, this.BitmapTransform, "int", height := Floor(height*scale)) ; put_ScaledHeight
            ComCall(8, BitmapFrame, "uint*", &BitmapPixelFormat:=0) ; get_BitmapPixelFormat
            ComCall(9, BitmapFrame, "uint*", &BitmapAlphaMode:=0) ; get_BitmapAlphaMode
            ComCall(8, BitmapFrameWithSoftwareBitmap, "uint", BitmapPixelFormat, "uint", BitmapAlphaMode, "ptr", this.BitmapTransform, "uint", IgnoreExifOrientation := 0, "uint", DoNotColorManage := 0, "ptr*", SoftwareBitmap:=this.IBase()) ; GetSoftwareBitmapAsync
        } else {
            ComCall(6, BitmapFrameWithSoftwareBitmap, "ptr*", SoftwareBitmap:=this.IBase())   ; GetSoftwareBitmapAsync
        }
        this.WaitForAsync(&SoftwareBitmap)
        if customRegion || rotate || flip || scale != 1
            SoftwareBitmap := this.TransformSoftwareBitmap(SoftwareBitmap, &width, &height, scale, rotate, flip, x?, y?, w?, h?)

        SoftwareBitmapCommon:

        if (grayscale || invertcolors || monochrome || this.DisplayImage) {
            ComCall(15, SoftwareBitmap, "int", 2, "ptr*", BitmapBuffer := ComValue(13,0)) ; LockBuffer
            MemoryBuffer := ComObjQuery(BitmapBuffer, "{fbc4dd2a-245b-11e4-af98-689423260cf8}")
            ComCall(6, MemoryBuffer, "ptr*", MemoryBufferReference := ComValue(13,0)) ; CreateReference
            BufferByteAccess := ComObjQuery(MemoryBufferReference, "{5b0d3235-4dba-4d44-865e-8f1d0e4fd04d}")
            ComCall(3, BufferByteAccess, "ptr*", &SoftwareBitmapByteBuffer:=0, "uint*", &BufferSize:=0) ; GetBuffer
           
            if grayscale
                DllCall(this.GrayScaleMCode, "ptr", SoftwareBitmapByteBuffer, "uint", width, "uint", height, "uint", (width*4+3) // 4 * 4, "cdecl uint")

            if monochrome
                DllCall(this.MonochromeMCode, "ptr", SoftwareBitmapByteBuffer, "uint", width, "uint", height, "uint", (width*4+3) // 4 * 4, "uint", monochrome, "cdecl uint")
            
            if invertcolors
                DllCall(this.InvertColorsMCode, "ptr", SoftwareBitmapByteBuffer, "uint", width, "uint", height, "uint", (width*4+3) // 4 * 4, "cdecl uint")
    
            if this.DisplayImage {
                local hdc := DllCall("GetDC", "ptr", 0, "ptr"), bi := Buffer(40, 0), hbm
                NumPut("uint", 40, "int", width, "int", -height, "ushort", 1, "ushort", 32, bi)
                hbm := DllCall("CreateDIBSection", "ptr", hdc, "ptr", bi, "uint", 0, "ptr*", &ppvBits:=0, "ptr", 0, "uint", 0, "ptr")
                DllCall("ntdll\memcpy", "ptr", ppvBits, "ptr", SoftwareBitmapByteBuffer, "uint", BufferSize, "cdecl")
                DllCall("ReleaseDC", "Ptr", 0, "Ptr", hdc, "Int")
                this.DisplayHBitmap(hbm)
            }
            
            BufferByteAccess := "", MemoryBufferReference := "", MemoryBuffer := "", BitmapBuffer := "" ; Release in correct order
        }

        ComCall(6, this.OcrEngine, "ptr", SoftwareBitmap, "ptr*", Result:=ComValue(13,0))   ; RecognizeAsync
        this.WaitForAsync(&Result)
        OcrResult.Ptr := Result.Ptr, ObjAddRef(OcrResult.ptr)

        ; Cleanup
        if RandomAccessStream is this.IBase
            this.CloseIClosable(RandomAccessStream)
        if SoftwareBitmap is this.IBase
            this.CloseIClosable(SoftwareBitmap)

        if scale != 1 || x != 0 || y != 0
            this.NormalizeCoordinates(OcrResult, scale, x, y)

        return OcrResult
    }

    static ClearAllHighlights() => this.Result.Prototype.Highlight("clearall")

    class Result extends OCR.Common {
        ; Gets the recognized text.
        Text {
            get {
                ComCall(8, this, "ptr*", &hAllText:=0)   ; get_Text
                buf := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hAllText, "uint*", &length:=0, "ptr")
                this.DefineProp("Text", {Value:StrGet(buf, "UTF-16")})
                this.__OCR.DeleteHString(hAllText)
                return this.Text
            }
        }

        ; Gets the clockwise rotation of the recognized text, in degrees, around the center of the image.
        TextAngle {
            get => (ComCall(7, this, "double*", &value:=0), value)
        }

        ; Returns all Line objects for the result.
        Lines {
            get {
                ComCall(6, this, "ptr*", LinesList:=ComValue(13, 0)) ; get_Lines
                ComCall(7, LinesList, "int*", &count:=0) ; count
                lines := []
                loop count {
                    ComCall(6, LinesList, "int", A_Index-1, "ptr*", Line:=this.__OCR.Line(this)) 
                    lines.Push(Line)
                }
                this.DefineProp("Lines", {Value:lines})
                return lines
            }
        }

        ; Returns all Word objects for the result. Equivalent to looping over all the Lines and getting the Words.
        Words {
            get {
                local words := [], line, word
                for line in this.Lines
                    for word in line.Words
                        words.Push(word)
                this.DefineProp("Words", {Value:words})
                return words
            }
        }

        BoundingRect {
            get => this.DefineProp("BoundingRect", {Value:this.__OCR.WordsBoundingRect(this.Words*)}).BoundingRect
        }

        /**
         * Finds a string in the search results, and returns a new Result object.
         * If the match is partial then the result will contain the whole word: in "hello world" searching "wo" will return "world".
         * To force a full word search instead of a partial search, use IgnoreLinebreaks:True 
         *  and add a space to the beginning and end: " hello "
         * To search multi-line matches, set IgnoreLinebreaks:True and use a linebreak in the needle: "hello`nworld"
         * @param Needle The string to find. 
         * @param Options Extra search options object, which can contain the following properties:
         *  CaseSense: False (this is ignored if a custom SearchFunc is used)
         *  IgnoreLinebreaks: False (if this is True, then linebreaks are converted to whitespaces, otherwise remain `n)
         *  AllowOverlap: False (if True then the needle can overlap itself)
         *  i: 1 (which occurrence of the needle to find)
         *  x, y, w, h: defines the search area inside the result object
         *  SearchFunc: default is InStr, but if a custom function is provided then it needs to return
         *      the needle location in the haystack, and accept arguments (Haystack, Needle, &FoundMatch)
         *      This can used for example to perform a RegEx search by providing RegExMatch
         * @returns {Object} 
         */
        FindString(Needle, Options := "") => this.__FindString(Needle, Options, 0)

        /**
         * Finds all strings matching the needle in the search results. Returns an array of Result objects.
         * @param Needle The string to find. 
         * @param Options See Result.FindString. {CaseSense: False, IgnoreLinebreaks: False, AllowOverlap: false, i: 1, x, y, w, h, SearchFunc}
         *  If i is specified then the result object will contains matches starting from i.
         * @returns {Array} 
         */
        FindStrings(Needle, Options := "") => this.__FindString(Needle, Options, true)

        __FindString(Needle, Options, All) {
            local CaseSense := false, IgnoreLinebreaks := false, AllowOverlap := false, i := 1, SearchFunc, x, y, w, h
            local currentHaystack, fullHaystackLinebreaks := "`n", offset := 0, line, counter := 0, x1, y1, x2, y2, result, results := [], word

            if !(Needle is String)
                throw TypeError("Needle is required to be a string, not type " Type(Needle), -1)
            if Trim(Needle, " `t`n`r") == ""
                throw ValueError("Needle cannot be an empty string", -1)

            this.__OCR.__ExtractNamedParameters(Options, "CaseSense", &CaseSense, "IgnoreLinebreaks", &IgnoreLinebreaks, "AllowOverlap", &AllowOverlap, "i", &i, "SearchFunc", &SearchFunc, "x", &x, "y", &y, "w", &w, "h", &h)

            if !IsSet(SearchFunc)
                SearchFunc := (haystack, needle, &foundstr) => (pos := InStr(haystack, needle, casesense), foundstr := SubStr(haystack, pos, StrLen(needle)), pos)

            if (IsSet(x) || IsSet(y) || IsSet(w) || IsSet(h)) {
                x1 := x ?? -100000, y1 := y ?? -100000, x2 := IsSet(w) ? x + w : 100000, y2 := IsSet(h) ? y + h : 100000 
            }

            tokenizedHaystack := [IgnoreLinebreaks ? " " : "`n"]
            for Line in this.Lines {
                fullHaystackLinebreaks .= line.Text "`n"
                for Word in Line.Words
                    tokenizedHaystack.Push(Word, " ")
                tokenizedHaystack.Pop()
                tokenizedHaystack.Push(IgnoreLinebreaks ? " " : "`n")
            }

            fullHaystackNoLinebreaks := StrReplace(fullHaystackLinebreaks, "`n", " ") ; Make sure the words are in the same order as the tokenized version
            fullHaystack := IgnoreLinebreaks ? fullHaystackNoLinebreaks : fullHaystackLinebreaks

            Needle := RegExReplace(StrReplace(Needle, "`t", " "), " +", " ")

            fullFirst := SubStr(Needle, 1, 1) ~= "[ \n]", fullLast := SubStr(Needle, -1, 1) ~= "[ \n]"

            currentHaystack := fullHaystack
            Loop {
                if !(loc := SearchFunc(currentHaystack, Needle, &foundNeedle))
                    break

                if IsObject(foundNeedle)
                    foundNeedle := foundNeedle[]

                foundLen := AllowOverlap ? 1 : StrLen(foundNeedle)
                currentHaystack := SubStr(currentHaystack, loc + foundLen) ; Remove the match from the haystack, allowing overlap
                offset += loc + foundLen - 1

                if ++counter < i
                    continue

                tokenizedNeedle := []
                ; Tokenize the needle
                for wsNeedle in wsSplit := StrSplit(foundNeedle, " ") {
                    for lbNeedle in lbSplit := StrSplit(wsNeedle, "`n") {
                        tokenizedNeedle.Push(lbNeedle, "`n")
                    }
                    if lbSplit.Length
                        tokenizedNeedle.Pop()
                    tokenizedNeedle.Push(" ")
                }
                tokenizedNeedle.Pop()
                
                preceding := SubStr(fullHaystackNoLinebreaks, 1, offset - foundLen)
                ; Find first Word location
                StrReplace(preceding, " ",,, &startingWord:=0)
                startingWord := startingWord*2 + fullFirst - 1 ; Substracted 1 to allow subsequent loop to just add A_Index

                foundNeedle := "", foundWords := [], foundLines := [], line := this.__OCR.Line(this), line.DefineProp("Words", {value:[]}), line.DefineProp("Text", {value:""})
                Loop tokenizedNeedle.Length {
                    word := tokenizedHaystack[startingWord + A_Index]
                    if (word == "`n") {
                        foundNeedle .= line.Text
                        line.Text := RTrim(line.Text), foundLines.Push(line)
                        line := this.__OCR.Line(this), line.DefineProp("Words", {value:[]}), line.DefineProp("Text", {value:""})
                    }
                    if !IsObject(word)
                        continue
                    If IsSet(x1) && (word.x < x1 || word.y < y1 || word.x+word.w > x2 || word.y+word.h > y2) {
                        counter--
                        continue 2
                    }
                    line.Words.Push(word), line.Text .= word.Text " "
                    foundWords.Push(word)
                }
                if line.Text {
                    foundNeedle .= line.Text
                    line.Text := RTrim(line.Text), foundLines.Push(line)
                }

                result := this.Clone(), ObjAddRef(this.ptr)
                result.DefineProp("BoundingRect", {value: this.__OCR.WordsBoundingRect(foundWords*)})
                result.DefineProp("Lines", {value: foundLines})
                result.DefineProp("Words", {value: foundWords})
                result.DefineProp("Text", {value: foundNeedle})
                if All {
                    results.Push(result)
                } else
                    return result
            }
            if All
                return results

            throw TargetError('The target string "' Needle '" was not found', -1)
        }
    
        /**
         * Filters out all the words that do not satisfy the callback function and returns a new OCR.Result object
         * @param {Object} callback The callback function that accepts a OCR.Word object.
         * If the callback returns 0 then the word is filtered out (rejected), otherwise is kept.
         * @returns {OCR.Result}
         */
        Filter(callback) {
            if !HasMethod(callback)
                throw ValueError("Filter callback must be a function", -1)
            local result := this.Clone(), line, croppedLines := [], croppedText := "", croppedWords := [], lineText := "", word
            ObjAddRef(result.ptr)
            for line in result.Lines {
                croppedWords := [], lineText := ""
                for word in line.Words {
                    if callback(word)
                        croppedWords.Push(word), lineText .= word.Text " "
                }
                if croppedWords.Length {
                    line := this.__OCR.Line()
                    line.DefineProp("Text", {value:Trim(lineText)})
                    line.DefineProp("Words", {value:croppedWords})
                    croppedLines.Push(line)
                    croppedText .= lineText
                }
            }
            result.DefineProp("Lines", {Value:croppedLines})
            result.DefineProp("Text", {Value:Trim(croppedText)})
            result.DefineProp("Words", this.__OCR.Result.Prototype.GetOwnPropDesc("Words"))
            return result
        }
    
        /**
         * Crops the result object to contain only results from an area defined by points (x1,y1) and (x2,y2).
         * Note that these coordinates are relative to the result object, not to the screen.
         * @param {Integer} x1 x coordinate of the top left corner of the search area
         * @param {Integer} y1 y coordinate of the top left corner of the search area
         * @param {Integer} x2 x coordinate of the bottom right corner of the search area
         * @param {Integer} y2 y coordinate of the bottom right corner of the search area
         * @returns {OCR.Result}
         */
        Crop(x1:=-100000, y1:=-100000, x2:=100000, y2:=100000) => this.Filter((word) => word.x >= x1 && word.y >= y1 && (word.x+word.w) <= x2 && (word.y+word.h) <= y2)
    }
    class Line extends OCR.Common {
        ; Gets the recognized text for the line.
        Text {
            get {
                ComCall(7, this, "ptr*", &hText:=0)   ; get_Text
                buf := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", &length:=0, "ptr")
                text := StrGet(buf, "UTF-16")
                this.__OCR.DeleteHString(hText)
                this.DefineProp("Text", {Value:text})
                return text
            }
        }

        ; Gets the Word objects for the line
        Words {
            get {
                ComCall(6, this, "ptr*", WordsList:=ComValue(13, 0))   ; get_Words
                ComCall(7, WordsList, "int*", &WordsCount:=0)   ; Words count
                words := []
                loop WordsCount {
                   ComCall(6, WordsList, "int", A_Index-1, "ptr*", Word:=this.__OCR.Word(this))
                   words.Push(Word)
                }
                this.DefineProp("Words", {Value:words})
                return words
            }
        }

        BoundingRect {
            get => this.DefineProp("BoundingRect", {Value:this.__OCR.WordsBoundingRect(this.Words*)}).BoundingRect
        }
    }

    class Word extends OCR.Common {
        ; Gets the recognized text for the word
        Text {
            get {
                ComCall(7, this, "ptr*", &hText:=0)   ; get_Text
                buf := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", &length:=0, "ptr")
                text := StrGet(buf, "UTF-16")
                this.__OCR.DeleteHString(hText)
                this.DefineProp("Text", {Value:text})
                return text
            }
        }

        /**
         * Gets the bounding rectangle of the text in {x,y,w,h} format. 
         * The bounding rectangles coordinate system will be dependant on the image capture method.
         * For example, if the image was captured as a rectangle from the screen, then the coordinates
         * will be relative to the left top corner of the screen.
         */
        BoundingRect {
            get {
                ComCall(6, this, "ptr", RECT := Buffer(16, 0))   ; get_BoundingRect
                this.DefineProp("x", {Value:Integer(NumGet(RECT, 0, "float"))})
                , this.DefineProp("y", {Value:Integer(NumGet(RECT, 4, "float"))})
                , this.DefineProp("w", {Value:Integer(NumGet(RECT, 8, "float"))})
                , this.DefineProp("h", {Value:Integer(NumGet(RECT, 12, "float"))})
                return this.DefineProp("BoundingRect", {Value:{x:this.x, y:this.y, w:this.w, h:this.h}}).BoundingRect
            }
        }
    }

    class Common extends OCR.IBase {
        x {
            get => this.BoundingRect.x
        } 
        y {
            get => this.BoundingRect.y
        }
        w {
            get => this.BoundingRect.w
        }
        h {
            get => this.BoundingRect.h
        }
    
        /**
         * Highlights the object on the screen with a red box
         * @param {number} showTime Default is 2 seconds.
         * * Unset - if highlighting exists then removes the highlighting, otherwise pauses for 2 seconds
         * * 0 - Indefinite highlighting
         * * Positive integer (eg 2000) - will highlight and pause for the specified amount of time in ms
         * * Negative integer - will highlight for the specified amount of time in ms, but script execution will continue
         * * "clear" - removes the highlighting unconditionally
         * * "clearall" - remove highlightings from all OCR objects
         * @param {string} color The color of the highlighting. Default is red.
         * @param {number} d The border thickness of the highlighting in pixels. Default is 2.
         * @returns {OCR.Result}
         */
        Highlight(showTime?, color:="Red", d:=2) {
            static Guis := Map()
            local x, y, w, h, key, oObj, GuiObj, iw, ih
            ; showTime unset => either highlights for 2s, or removes highlight
            ; showTime clear => removes highlight
            if IsSet(showTime) {
                if showTime = "clearall" {
                    for key, oObj in Guis { ; enum all OCR result objects
                        try oObj.GuiObj.Destroy()
                        SetTimer(oObj.TimerObj, 0)
                    }
                    Guis := Map()
                    return this
                } else if showTime = "clear" {
                    if Guis.Has(this) {
                        try Guis[this].GuiObj.Destroy()
                        SetTimer(Guis[this].TimerObj, 0)
                        Guis.Delete(this)
                    }
                    return this
                }
            }
    
            if !IsSet(showTime) {
                if Guis.Has(this) {
                    try Guis[this].GuiObj.Destroy()
                    SetTimer(Guis[this].TimerObj, 0)
                    Guis.Delete(this)
                    return this
                } else
                    showTime := 2000
            }
    
            x := this.x, y := this.y, w := this.w, h := this.h
            if this.HasProp("Relative") {
                if this.Relative.HasProp("CoordMode") {
                    if this.Relative.CoordMode = "Client"
                        WinGetClientPos(&rX, &rY,,, this.Relative.hWnd), x += rX, y += rY
                    else if this.Relative.CoordMode = "Window"
                        WinGetPos(&rX, &rY,,, this.Relative.hWnd), x += rX, y += rY
                }
                x += this.Relative.HasProp("x") ? this.Relative.x : 0
                y += this.Relative.HasProp("y") ? this.Relative.y : 0
            }
    
            if !Guis.Has(this) {
                Guis[this] := {}
                Guis[this].GuiObj := Gui("+AlwaysOnTop -Caption +ToolWindow -DPIScale +E0x08000000")
                Guis[this].TimerObj := ObjBindMethod(this, "Highlight", "clear")
            }
            GuiObj := Guis[this].GuiObj
            GuiObj.BackColor := color
            iw:= w+d, ih:= h+d, w:=w+d*2, h:=h+d*2, x:=x-d, y:=y-d
            WinSetRegion("0-0 " w "-0 " w "-" h " 0-" h " 0-0 " d "-" d " " iw "-" d " " iw "-" ih " " d "-" ih " " d "-" d, GuiObj.Hwnd)
            GuiObj.Show("NA x" . x . " y" . y . " w" . w . " h" . h)
    
            if showTime > 0 {
                Sleep(showTime)
                this.Highlight()
            } else if showTime < 0
                SetTimer(Guis[this].TimerObj, -Abs(showTime))
            return this
        }
        ClearHighlight() => this.Highlight("clear")
    
        /**
         * Clicks an object
         * If this object (the one Click is called from) contains a "Relative" property (this is
         * added by default with OCR.FromWindow) containing a hWnd property, then that window will be activated,
         * otherwise the Relative objects x/y properties values will be added to the x and y coordinates as offsets.
         */
        Click(WhichButton?, ClickCount?, DownOrUp?) {
            local x := this.x, y := this.y, w := this.w, h := this.h, mode := "Screen", hwnd
            if this.HasProp("Relative") {
                if this.Relative.HasProp("CoordMode") {
                    if this.Relative.CoordMode = "Window"
                        mode := "Window", hwnd := this.Relative.Hwnd
                    else if this.Relative.CoordMode = "Client"
                        mode := "Client", hwnd := this.Relative.Hwnd
                    if IsSet(hwnd) && !WinActive(hwnd) {
                        WinActivate(hwnd)
                        WinWaitActive(hwnd,,1)
                    }
                }
                x += this.Relative.HasProp("x") ? this.Relative.x : 0
                y += this.Relative.HasProp("y") ? this.Relative.y : 0
            }
            oldCoordMode := A_CoordModeMouse
            CoordMode "Mouse", mode
            Click(x+w//2, y+h//2, WhichButton?, ClickCount?, DownOrUp?)
            CoordMode "Mouse", oldCoordMode
        }
    
        /**
         * ControlClicks an object.
         * If the result object originates from OCR.FromWindow which captured only the client area,
         * then the result object will contain correct coordinates for the ControlClick. 
         * Coordinates will be adjusted to Client area from the CoordMode that the OCR happened in.
         * Otherwise, if additionally a WinTitle is provided then the coordinates are treated as Screen 
         * coordinates and converted to Client coordinates.
         * @param WinTitle If WinTitle is set, then the coordinates stored in Obj will be converted to
         * client coordinates and ControlClicked.
         */
        ControlClick(WinTitle?, WinText?, WhichButton?, ClickCount?, Options?, ExcludeTitle?, ExcludeText?) {
            local x := this.x, y := this.y, w := this.w, h := this.h, hWnd
            if this.HasProp("Relative") {
                x += this.Relative.HasProp("x") ? this.Relative.x : 0
                y += this.Relative.HasProp("y") ? this.Relative.y : 0
            }
            if this.HasProp("Relative") && this.Relative.HasProp("CoordMode") && (this.Relative.CoordMode = "Client" || this.Relative.CoordMode = "Window") {
                mode := this.Relative.CoordMode, hWnd := this.Relative.hWnd
                if mode = "Window" {
                    ; Window -> Client
                    RECT := Buffer(16, 0), pt := Buffer(8, 0)
                    DllCall("user32\GetWindowRect", "Ptr", hWnd, "Ptr", RECT)
                    winX := NumGet(RECT, 0, "Int"), winY := NumGet(RECT, 4, "Int")
                    NumPut("int", winX+x, "int", winY+y, pt)
                    DllCall("user32\ScreenToClient", "Ptr", hWnd, "Ptr", pt)
                    x := NumGet(pt,0,"int"), y := NumGet(pt,4,"int")
                }
            } else if IsSet(WinTitle) {
                hWnd := WinExist(WinTitle, WinText?, ExcludeTitle?, ExcludeText?)
                pt := Buffer(8), NumPut("int",x,pt), NumPut("int", y,pt,4)
                DllCall("ScreenToClient", "Int", Hwnd, "Ptr", pt)
                x := NumGet(pt,0,"int"), y := NumGet(pt,4,"int")
            } else
                throw TargetError("ControlClick needs to be called either after a OCR.FromWindow result or with a WinTitle argument")
                
            ControlClick("X" (x+w//2) " Y" (y+h//2), hWnd,, WhichButton?, ClickCount?, Options?)
        }
    
        OffsetCoordinates(offsetX?, offsetY?) {
            if !IsSet(offsetX) || !IsSet(offsetY) {
                if this.HasOwnProp("Relative") {
                    offsetX := this.Relative.HasProp("x") ? this.Relative.X : 0
                    offsetY := this.Relative.HasProp("y") ? this.Relative.Y : 0
                } else
                    throw Error("No Relative property found",, -1)
            }
            if offsetX = 0 && offsetY = 0
                return this
            local word
            for word in this.Words
                word.x += offsetX, word.y += offsetY, word.BoundingRect := {X:word.x, Y:word.y, W:word.w, H:word.h}
            return this
        }
    }

    /**
     * Returns an OCR results object for an image file. Locations of the words will be relative to
     * the top left corner of the image.
     * @param FileName Either full or relative (to A_WorkingDir) path to the file.
     * @param lang OCR language. Default is first from available languages.
     * @param transform Either a scale factor number, or an object {scale:Float, grayscale:Boolean, invertcolors:Boolean, monochrome:0-255, rotate: 0 | 90 | 180 | 270, flip: 0 | "x" | "y"}
     * @returns {OCR.Result} 
     */
    static FromFile(FileName, Options:=0) {
        if !(fe := FileExist(FileName)) or InStr(fe, "D")
            throw TargetError("File `"" FileName "`" doesn't exist", -1)
        GUID := this.CLSIDFromString(this.IID_IRandomAccessStream)
        DllCall("ShCore\CreateRandomAccessStreamOnFile", "wstr", FileName, "uint", Read := 0, "ptr", GUID, "ptr*", IRandomAccessStream:=this.IBase())
        if IsObject(Options) && !Options.HasProp("Decoder")
            Options.Decoder := this.Vtbl_GetDecoder.HasOwnProp(ext := StrSplit(FileName, ".")[-1]) ? ext : ""
        return this(IRandomAccessStream, Options)
    }

    /**
     * Returns an array of OCR results objects for a PDF file. Locations of the words will be relative to
     * the top left corner of the PDF page.
     * @param FileName Either full or relative (to A_WorkingDir) path to the file.
     * @param Options Optional: OCR options {lang, scale, grayscale, invertcolors, rotate, flip, x, y, w, h, decoder}. 
     * @param Start Optional: Page number to start from. Default is first page.
     * @param End Optional: Page number to end with (included). Default is last page.
     * @param Password Optional: PDF password.
     * @returns {OCR.Result} 
     */
    static FromPDF(FileName, Options:=0, Start:=1, End?, Password:="") {
        this.__ExtractNamedParameters(Options, "lang", &lang, "start", &Start, "end", &End, "password", &Password)
        if !(fe := FileExist(FileName)) or InStr(fe, "D")
            throw TargetError("File `"" FileName "`" doesn't exist", -1)

        DllCall("ShCore\CreateRandomAccessStreamOnFile", "wstr", FileName, "uint", Read := 0, "ptr", GUID := this.CLSIDFromString(this.IID_IRandomAccessStream), "ptr*", IRandomAccessStream:=ComValue(13,0))
        PdfDocument := this.__OpenPdfDocument(IRandomAccessStream, Password)
        this.CloseIClosable(IRandomAccessStream)
        if !IsSet(End) {
            ComCall(7, PdfDocument, "uint*", &End:=0) ; GetPageCount
            if !End
                throw Error("Unable to get PDF page count", -1)
        }
        local results := []
        Loop (End+1-Start)
            results.Push(this.FromPDFPage(PdfDocument, Start+(A_Index-1), Options))
        return results
    }

    static GetPdfPageCount(FileName, Password:="") {
        DllCall("ShCore\CreateRandomAccessStreamOnFile", "wstr", FileName, "uint", Read := 0, "ptr", GUID := this.CLSIDFromString(this.IID_IRandomAccessStream), "ptr*", IRandomAccessStream:=ComValue(13,0))
        PdfDocument := this.__OpenPdfDocument(IRandomAccessStream, Password)
        this.CloseIClosable(IRandomAccessStream)
        ComCall(7, PdfDocument, "uint*", &PageCount:=0) ; GetPageCount
        if !PageCount
            throw Error("Unable to get PDF page count", -1)
        
        return PageCount
    }

    ; Returns {Width, Height, Rotation, PreferredZoom}
    static GetPdfPageProperties(FileName, Page, Password:="") {
        DllCall("ShCore\CreateRandomAccessStreamOnFile", "wstr", FileName, "uint", Read := 0, "ptr", GUID := this.CLSIDFromString(this.IID_IRandomAccessStream), "ptr*", IRandomAccessStream:=ComValue(13,0))
        PdfDocument := this.__OpenPdfDocument(IRandomAccessStream, Password)
        this.CloseIClosable(IRandomAccessStream)
        ComCall(6, PdfDocument, "uint", Page-1, "ptr*", PdfPage:=ComValue(13, 0)) ; GetPage
        ComCall(10, PdfPage, "ptr*", Size:=Buffer(8, 0)) ; Size
        ComCall(12, PdfPage, "uint*", &Rotation:=0)
        ComCall(12, PdfPage, "float*", &PreferredZoom:=0)
        return {Width: NumGet(Size, 0, "float"), Height: NumGet(size, 4, "float"), Rotation: Rotation*90, PreferredZoom:PreferredZoom}
    }

    /**
     * Returns an OCR result object for a PDF page. Locations of the words will be relative to
     * the top left corner of the PDF page.
     * @param FileName Either full or relative (to A_WorkingDir) path to the file.
     * @param Page The page number to OCR.
     * @param Options Optional: OCR options {lang, scale, grayscale, invertcolors, rotate, flip, x, y, w, h, decoder}. 
     * @param Password Optional: PDF password.
     * @returns {OCR.Result} 
     */
    static FromPDFPage(FileName, Page, Options:=0, Password:="") {
        local scale := 1, x := 0, y := 0, w := 0, h := 0
        if IsObject(Options)
            Options := Options.Clone()
        this.__ExtractNamedParameters(Options, "Password", &Password, "scale", &scale, "x", &x, "y", &y, "w", &w, "h", &h)
        if FileName is String {
            if !(fe := FileExist(FileName)) or InStr(fe, "D")
                throw TargetError("File `"" FileName "`" doesn't exist", -1)
            GUID := this.CLSIDFromString(this.IID_IRandomAccessStream)
            DllCall("ShCore\CreateRandomAccessStreamOnFile", "wstr", FileName, "uint", Read := 0, "ptr", GUID, "ptr*", IRandomAccessStream:=ComValue(13, 0))
            PdfDocument := this.__OpenPdfDocument(IRandomAccessStream, Password)
        } else
            PdfDocument := FileName
        ComCall(6, PdfDocument, "uint", Page-1, "ptr*", PdfPage:=ComValue(13, 0)) ; GetPage
        InMemoryRandomAccessStream := this.CreateClass("Windows.Storage.Streams.InMemoryRandomAccessStream")
        PdfPageRenderOptions := this.CreateClass("Windows.Data.Pdf.PdfPageRenderOptions")
        ComCall(15, PdfPageRenderOptions, "uint", true) ; IsIgnoringHighContrast
        if x || y || w || h {
            rect := Buffer(16, 0), NumPut("float", x, "float", y, "float", w, "float", h, rect)
            ComCall(7, PdfPageRenderOptions, "ptr", rect) ; put_SourceRect
            Options.w := Options.w*scale, Options.h := Options.h*scale
            Options.DeleteProp("x"), Options.DeleteProp("y"), Options.DeleteProp("w"), Options.DeleteProp("h")
        }
        if (scale != 1) {
            ComCall(10, PdfPage, "ptr", Size:=Buffer(8, 0)) ; get_Size
            ComCall(9, PdfPageRenderOptions, "uint", Floor((w || NumGet(size, 0, "float"))*scale)) ; put_DestinationWidth
            ComCall(11, PdfPageRenderOptions, "uint", Floor((h || NumGet(size, 4, "float"))*scale)) ; put_DestinationHeight
            Options.DeleteProp("scale")
        }
        ComCall(7, PdfPage, "ptr", InMemoryRandomAccessStream, "ptr", PdfPageRenderOptions, "ptr*", asyncInfo:=ComValue(13, 0)) ; RenderWithOptionsToStreamAsync
        this.WaitForAsync(&asyncInfo)
        if FileName is String
            this.CloseIClosable(IRandomAccessStream)
        PdfPage := "", PdfDocument := "", IRandomAccessStream := ""
        OcrResult := this(InMemoryRandomAccessStream, Options)
        if scale != 1
            this.NormalizeCoordinates(OcrResult, scale)
        return OcrResult
    }

    /**
     * Returns an OCR results object for a given window. Locations of the words will be relative
     * using the CoordMode from A_CoordModePixel (default is Client). 
     * The window from where the image was captured is stored in Result.Relative.hWnd
     * Additionally, Result.Relative.CoordMode is stored (the A_CoordModePixel at the time of OCR).
     * @param WinTitle A window title or other criteria identifying the target window.
     * @param Options Optional: OCR options {lang, scale, grayscale, invertcolors, rotate, flip, x, y, w, h, decoder}. 
     * Additionally for FromWindow the options may include:
     *      mode:  Different methods of capturing the window. 
     *        0 = uses GetDC with BitBlt
     *        1 = same as 0 but window transparency is turned off beforehand with WinSetTransparent
     *        2 = uses PrintWindow. 
     *        3 = same as 1 but window transparency is turned off beforehand with WinSetTransparent
     *        4 = uses PrintWindow with undocumented PW_RENDERFULLCONTENT flag, allowing capture of hardware-accelerated windows
     *        5 = uses Direct3D11 from UWP Windows.Graphics.Capture (slowest option, but may work with games) 
     *             This may draw a yellow border around the target window in older Windows versions.
     * @param WinText Additional window criteria.
     * @param ExcludeTitle Additional window criteria.
     * @param ExcludeText Additional window criteria.
     * @returns {OCR.Result} 
     */
    static FromWindow(WinTitle:="", Options:=0, WinText:="", ExcludeTitle:="", ExcludeText:="") {
        local result, coordsmode := A_CoordModePixel, onlyClientArea := coordsMode = "Client", mode := 4, X := 0, Y := 0, W := 0, H := 0, sX, sY, hBitMap, hwnd, customRect := 0, transform := 0
        if !Options && Type(WinTitle) = "Object"
            Options := WinTitle, WinTitle := ""
        if IsObject(Options)
            Options := Options.Clone()
        this.__ExtractTransformParameters(Options, &transform)
        this.__ExtractNamedParameters(Options, "x", &x, "y", &y, "w", &w, "width", &w, "h", &h, "height", &h, "mode", &mode, "WinTitle", &WinTitle, "WinText", &WinText, "ExcludeTitle", &ExcludeTitle, "ExcludeText", &ExcludeText)
        this.__DeleteProps(Options, "x", "y", "w", "width", "h", "height", "scale", "mode")
        if (x !=0 || y != 0 || w != 0 || h != 0)
            customRect := 1
        if !(hWnd := WinExist(WinTitle, WinText, ExcludeTitle, ExcludeText))
            throw TargetError("Target window not found", -1)
        if DllCall("IsIconic", "uptr", hwnd)
            DllCall("ShowWindow", "uptr", hwnd, "int", 4)
        if mode < 4 && mode&1 {
            oldStyle := WinGetExStyle(hwnd), i := 0
            WinSetTransparent(255, hwnd)
            While (WinGetTransparent(hwnd) != 255 && ++i < 30)
                Sleep 100
        }

        WinGetPos(&wX, &wY, &wW, &wH, hWnd)
        If onlyClientArea {
            WinGetClientPos(&cX, &cY, &cW, &cH, hWnd)
            W := W || cW, H := H || cH, sX := X + cX, sY := Y + cY  ; Calculate final X and Y screen coordinates
        } else {
            W := W || wW, H := H || wH, sX := X + wX, sY := Y + wY
        }

        if mode = 5 {
            /*
                If we are capturing the whole window, then WinGetPos/MouseGetPos might include hidden borders.
                Eg (0,0) might be (-11, -11) for Direct3D, meaning (11,11) by WinGetPos is (0,0) for Direct3D.
                These offsets are calculated and stored in offsetX, offsetY, and if only the window
                area is captured then the result object coordinates are adjusted accordingly.

                If the SoftwareBitmap needs to be transformed in any way (eg scale or custom rect is
                provided) then we need to offset coordinates and possibly width/height as well.

            */
            SoftwareBitmap := this.CreateDirect3DSoftwareBitmapFromWindow(hWnd)

            local sbW := SoftwareBitmap.W, sbH := SoftwareBitmap.H, sbX := SoftwareBitmap.X, sbY := SoftwareBitmap.Y
            local offsetX := 0, offsetY := 0

            if transform.scale != 1 || transform.rotate || transform.flip || customRect || onlyClientArea {
                ; The bounds need to fit inside the SoftwareBitmap bounds, so possibly X,Y need to be adjusted along with W,H
                local tX := X, tY := Y, tW := W, tH := H
                if onlyClientArea
                    tX -= SoftwareBitmap.X-cX, tY -= SoftwareBitmap.Y-cY
                else
                    tX -= SoftwareBitmap.X-wX, tY -= SoftwareBitmap.Y-wY
                if tX < 0 ; If resulting coordinates are negative then adjust width and height accordingly 
                    tW += tX, offsetX := -tX, tX := 0
                if tY < 0
                    tH += tY, offsetY := -tY, tY := 0
                tW := Min(sbW-tX, tW), tH := Min(sbH-tY, tH)

                SoftwareBitmap := this.TransformSoftwareBitmap(SoftwareBitmap, &sbW, &sbH, transform.scale, transform.rotate, transform.flip, tX, tY, tW, tH)
                this.__DeleteProps(Options, "scale", "rotate", "flip")
            } else
                offsetX := sbX-wX, offsetY := sbY-wY
            result := this(SoftwareBitmap, Options)
        } else {
            hBitMap := this.CreateHBitmap(X, Y, W, H, {hWnd:hWnd, onlyClientArea:onlyClientArea, mode:(mode//2)}, transform.scale)
            if mode&1
                WinSetExStyle(oldStyle, hwnd)
            SoftwareBitmap := this.HBitmapToSoftwareBitmap(hBitMap,, transform)
            this.__DeleteProps(Options, "invertcolors", "grayscale", "monochrome")
            result := this(SoftwareBitmap, Options)
        }

        result.Relative := {CoordMode:coordsmode, hWnd:hWnd}
        if coordsmode = "Screen"
            x += sX, y += sY
        this.NormalizeCoordinates(result, transform.scale, x, y)
        if mode = 5 && !onlyClientArea
            result.OffsetCoordinates(offsetX, offsetY)
        return result
    }

    /**
     * Returns an OCR results object for the whole desktop. Locations of the words will be relative to
     * the primary screen (CoordMode "Screen"), even if a secondary monitor is being captured.
     * @param Options Optional: OCR options {lang, scale, grayscale, invertcolors, rotate, flip, x, y, w, h, decoder}. 
     * @param Monitor Optional: The monitor from which to get the desktop area. Default is primary monitor.
     *   If screen scaling between monitors differs, then use DllCall("SetThreadDpiAwarenessContext", "ptr", -3)
     * @returns {OCR.Result} 
     */
    static FromDesktop(Monitor?, Options:=0) {
        if !Options && IsSet(Monitor) && IsObject(Monitor)
            Options := Monitor, Monitor := unset
        this.__ExtractNamedParameters(Options, "Monitor", &Monitor)
        MonitorGet(monitor?, &Left, &Top, &Right, &Bottom)
        return this.FromRect(Left, Top, Right-Left, Bottom-Top, Options)
    }

    /**
     * Returns an OCR results object for a region of the screen. Locations of the words will be relative
     * to the screen.
     * @param x Screen x coordinate
     * @param y Screen y coordinate
     * @param w Region width. Maximum is OCR.MaxImageDimension; minimum is 40 pixels (source: user FanaticGuru in AutoHotkey forums), smaller images will be scaled to at least 40 pixels.
     * @param h Region height. Maximum is OCR.MaxImageDimension; minimum is 40 pixels, smaller images will be scaled accordingly.
     * @param Options OCR options {lang, scale, grayscale, invertcolors, rotate, flip, x, y, w, h, decoder}. 
     * @returns {OCR.Result} 
     */
    static FromRect(x, y, w, h, Options:=0) {
        local transform := 0, result
        if IsObject(Options)
            Options := Options.Clone()
        this.__ExtractTransformParameters(Options, &transform)
        this.__DeleteProps(Options, "scale", "invertcolors", "grayscale")
        local scale := transform.scale
            , hBitmap := this.CreateHBitmap(X, Y, W, H,, scale)
            , SoftwareBitmap := this.HBitmapToSoftwareBitmap(hBitmap,, transform)
            , result := this(SoftwareBitmap, Options)
        return this.NormalizeCoordinates(result, scale, x, y)
    }

    /**
     * Returns an OCR results object from a bitmap. Locations of the words will be relative
     * to the top left corner of the bitmap.
     * @param Bitmap A pointer to a GDIP Bitmap object, or HBITMAP, or an object with a ptr property
     *  set to one of the two.
     * @param Options OCR options {lang, scale, grayscale, invertcolors, rotate, flip, x, y, w, h, decoder}. 
     * @param hDC Optional: a device context for the bitmap. If omitted then the screen DC is used.
     * @returns {OCR.Result} 
     */
    static FromBitmap(Bitmap, Options:=0, hDC?) {
        local result, pDC, hBitmap, hBM2, oBM, oBM2, pBitmapInfo := Buffer(32, 0), W, H, scale, transform := 0
        if IsObject(Options)
            Options := Options.Clone()
        this.__ExtractTransformParameters(Options, &transform)
        scale := transform.scale
        this.__ExtractNamedParameters(Options, "hDC", &hDC)
        this.__DeleteProps(Options, "scale", "invertcolors", "grayscale")
        if !DllCall("GetObject", "ptr", Bitmap, "int", pBitmapInfo.Size, "ptr", pBitmapInfo) {
            DllCall("gdiplus\GdipCreateHBITMAPFromBitmap", "UPtr", Bitmap, "UPtr*", &hBitmap:=0, "Int", 0xffffffff)
            DllCall("GetObject", "ptr", hBitmap, "int", pBitmapInfo.Size, "ptr", pBitmapInfo)
            Bitmap := 0 ; Marks hBitmap to be deleted afterwards
        } else
            hBitmap := Bitmap

        W := NumGet(pBitmapInfo, 4, "int"), H := NumGet(pBitmapInfo, 8, "int")

        if scale != 1 || (W && H && (W < 40 || H < 40)) {
            sW := Ceil(W * scale), sH := Ceil(H * scale)

            hDC := DllCall("CreateCompatibleDC", "Ptr", 0, "Ptr")
            , oBM := DllCall("SelectObject", "Ptr", hDC, "Ptr", hBitmap, "Ptr")
            , pDC := DllCall("CreateCompatibleDC", "Ptr", hDC, "Ptr")
            , hBM2 := DllCall("CreateCompatibleBitmap", "Ptr", hDC, "Int", Max(40, sW), "Int", Max(40, sH), "Ptr")
            , oBM2 := DllCall("SelectObject", "Ptr", pDC, "Ptr", hBM2, "Ptr")
            if sW < 40 || sH < 40 ; Fills the bitmap so it's at least 40x40, which seems to improve recognition
                DllCall("StretchBlt", "Ptr", pDC, "Int", 0, "Int", 0, "Int", Max(40,sW), "Int", Max(40,sH), "Ptr", hDC, "Int", 0, "Int", 0, "Int", 1, "Int", 1, "UInt", 0x00CC0020 | this.CAPTUREBLT) ; SRCCOPY. 
            PrevStretchBltMode := DllCall("SetStretchBltMode", "Ptr", PDC, "Int", 3, "Int") ; COLORONCOLOR
            , DllCall("StretchBlt", "Ptr", pDC, "Int", 0, "Int", 0, "Int", sW, "Int", sH, "Ptr", hDC, "Int", 0, "Int", 0, "Int", W, "Int", H, "UInt", 0x00CC0020 | this.CAPTUREBLT) ; SRCCOPY
            , DllCall("SetStretchBltMode", "Ptr", PDC, "Int", PrevStretchBltMode)
            , DllCall("SelectObject", "Ptr", pDC, "Ptr", oBM2)
            , DllCall("SelectObject", "Ptr", hDC, "Ptr", oBM)
            , DllCall("DeleteDC", "Ptr", hDC)
            SoftwareBitmap := this.HBitmapToSoftwareBitmap(hBM2, pDC, transform)
            result := this(SoftwareBitmap, Options)
            this.NormalizeCoordinates(result, scale)
            DllCall("DeleteDC", "Ptr", pDC)
            , DllCall("DeleteObject", "UPtr", hBM2)
            goto End
        }
        result := this(this.HBitmapToSoftwareBitmap(hBitmap, hDC?, transform), Options)
        End:
        if !Bitmap
            DllCall("DeleteObject", "UPtr", hBitmap)
        return result
    } 

    /**
     * Returns all available languages as a string, where the languages are separated by newlines.
     * @returns {String} 
     */
    static GetAvailableLanguages() {
        ComCall(7, this.OcrEngineStatics, "ptr*", &LanguageList := 0)   ; AvailableRecognizerLanguages
        ComCall(7, LanguageList, "int*", &count := 0)   ; count
        Loop count {
            ComCall(6, LanguageList, "int", A_Index - 1, "ptr*", &Language := 0)   ; get_Item
            ComCall(6, Language, "ptr*", &hText := 0)
            buf := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", &length := 0, "ptr")
            text .= StrGet(buf, "UTF-16") "`n"
            this.DeleteHString(hText)
            ObjRelease(Language)
        }
        ObjRelease(LanguageList)
        return text
    }

    /**
     * Loads a new language which will be used with subsequent OCR calls.
     * @param {string} lang OCR language. Default is first from available languages.
     * @returns {void} 
     */
    static LoadLanguage(lang:="FirstFromAvailableLanguages") {
        local hString, Language:=ComValue(13, 0), OcrEngine:=ComValue(13, 0)
        if this.HasOwnProp("CurrentLanguage") && this.HasOwnProp("OcrEngine") && this.CurrentLanguage = lang
            return
        if HasMethod(lang)
            lang := lang()
        if (lang = "FirstFromAvailableLanguages")
            ComCall(10, this.OcrEngineStatics, "ptr*", OcrEngine)   ; TryCreateFromUserProfileLanguages
        else {
            hString := this.CreateHString(lang)
            , ComCall(6, this.LanguageFactory, "ptr", hString, "ptr*", Language)   ; CreateLanguage
            , this.DeleteHString(hString)
            , ComCall(9, this.OcrEngineStatics, "ptr", Language, "ptr*", OcrEngine)   ; TryCreateFromLanguage
        }
        if (OcrEngine.ptr = 0)
            Throw Error(lang = "FirstFromAvailableLanguages" ? "Failed to use FirstFromAvailableLanguages for OCR:`nmake sure the primary language pack has OCR capabilities installed.`n`nAlternatively try `"en-us`" as the language." : "Can not use language `"" lang "`" for OCR, please install language pack.")
        this.OcrEngine := OcrEngine, this.CurrentLanguage := lang
    }

    /**
     * Returns a bounding rectangle {x,y,w,h} for the provided Word objects
     * @param words Word object arguments (at least 1)
     * @returns {Object}
     */
    static WordsBoundingRect(words*) {
        if !words.Length
            throw ValueError("This function requires at least one argument", -1)
        local X1 := 100000000, Y1 := 100000000, X2 := -100000000, Y2 := -100000000, word
        for word in words {
            X1 := Min(word.x, X1), Y1 := Min(word.y, Y1), X2 := Max(word.x+word.w, X2), Y2 := Max(word.y+word.h, Y2)
        }
        return {X:X1, Y:Y1, W:X2-X1, H:Y2-Y1, X2:X2, Y2:Y2}
    }
    
    /**
     * Waits text to appear on screen. If the method is successful, then Func's return value is returned.
     * Otherwise nothing is returned.
     * @param needle The searched text
     * @param {number} timeout Timeout in milliseconds. Less than 0 is indefinite wait (default)
     * @param func The function to be called for the OCR. Default is OCR.FromDesktop
     * @param casesense Text comparison case-sensitivity
     * @param comparefunc A custom string compare/search function, that accepts two arguments: haystack and needle.
     *      Default is InStr. If a custom function is used, then casesense is ignored.
     * @returns {OCR.Result} 
     */
    static WaitText(needle, timeout:=-1, func?, casesense:=False, comparefunc?) {
        local endTime := A_TickCount+timeout, result, line, total
        if !IsSet(func)
            func := this.FromDesktop
        if !IsSet(comparefunc)
            comparefunc := InStr.Bind(,,casesense)
        While timeout > 0 ? (A_TickCount < endTime) : 1 {
            result := func(), total := ""
            for line in result.Lines
                total .= line.Text "`n"
            if comparefunc(Trim(total, "`n"), needle)
                return result
        }
        return
    }

    /**
     * Returns word clusters using a two-dimensional DBSCAN algorithm
     * @param objs An array of objects (Words, Lines etc) to cluster. Must have x, y, w, h and Text properties.
     * @param eps_x Optional epsilon value for x-axis. Default is infinite.
     * This is unused if compareFunc is provided.
     * @param eps_y Optional epsilon value for y-axis. Default is median height of objects divided by two.
     * This is unused if compareFunc is provided.
     * @param minPts Optional minimum cluster size.
     * @param compareFunc Optional comparison function to judge the minimum distance between objects
     * to consider it a cluster. Must accept two objects to compare.
     * Default comparison function determines whether the difference of middle y-coordinates of 
     * the objects are less than epsilon-y, and whether objects are less than eps_x apart on the x-axis.
     * 
     * Eg `(p1, p2) => ((Abs(p1.y+p1.h-p2.y) < 5 || Abs(p2.y+p2.h-p1.y) < 5) && ((p1.x >= p2.x && p1.x <= (p2.x+p2.w)) || ((p1.x+p1.w) >= p2.x && (p1.x+p1.w) <= (p2.x+p2.w))))`
     * will cluster objects if they are located on top of eachother on the x-axis, and less than 5 pixels
     * apart in the y-axis.
     * @param noise If provided, then will be set to an array of clusters that didn't satisfy minPts
     * @returns {Array} Array of objects with {x,y,w,h,Text,Words} properties
     */
    static Cluster(objs, eps_x:=-1, eps_y:=-1, minPts:=1, compareFunc?, &noise?) {
        local clusters := [], start := 0, cluster, word
        visited := Map(), clustered := Map(), C := [], c_n := 0, sum := 0, noise := IsSet(noise) && (noise is Array) ? noise : []
        if !IsObject(objs) || !(objs is Array)
            throw ValueError("objs argument must be an Array", -1)
        if !objs.Length
            return []
        if IsSet(compareFunc) && !HasMethod(compareFunc)
            throw ValueError("compareFunc must be a valid function", -1)

        if !IsSet(compareFunc) {
            if (eps_y < 0) {
                for point in objs
                    sum += point.h
                eps_y := (sum // objs.Length) // 2
            }
            compareFunc := (p1, p2) => Abs(p1.y+p1.h//2-p2.y-p2.h//2)<eps_y && (eps_x < 0 || (Abs(p1.x+p1.w-p2.x)<eps_x || Abs(p1.x-p2.x-p2.w)<eps_x))
        }

        ; DBSCAN adapted from https://github.com/ninopereira/DBSCAN_1D
        for point in objs {
            visited[point] := 1, neighbourPts := [], RegionQuery(point)
            if !clustered.Has(point) {
                C.Push([]), c_n += 1, C[c_n].Push(point), clustered[point] := 1
                ExpandCluster(point)
            }
            if C[c_n].Length < minPts
                noise.Push(C[c_n]), C.RemoveAt(c_n), c_n--
        }

        ; Sort clusters by x-coordinate, get cluster bounding rects, and concatenate word texts
        for cluster in C {
            this.SortArray(cluster,,"x")
            br := this.Common(), br.DefineProp("BoundingRect", {value:this.WordsBoundingRect(cluster*)}), br.DefineProp("Words", {value:cluster}), br.DefineProp("Text", {value: ""})
            for word in cluster
                br.Text .= word.Text " "
            br.Text := RTrim(br.Text)
            clusters.Push(br)
        }
        ; Sort clusters/lines by y-coordinate
        this.SortArray(clusters,,"y")
        return clusters

        ExpandCluster(P) {
            local point
            for point in neighbourPts {
                if !visited.Has(point) {
                    visited[point] := 1, RegionQuery(point)
                    if !clustered.Has(point)
                        C[c_n].Push(point), clustered[point] := 1
                }
            }
        }

        RegionQuery(P) {
            local point
            for point in objs
                if !visited.Has(point)
                    if compareFunc(P, point)
                        neighbourPts.Push(point)
        }
    }

    /**
     * Sorts an array in-place, optionally by object keys or using a callback function.
     * @param arr The array to be sorted
     * @param OptionsOrCallback Optional: either a callback function, or one of the following:
     * 
     *     N => array is considered to consist of only numeric values. This is the default option.
     *     C, C1 or COn => case-sensitive sort of strings
     *     C0 or COff => case-insensitive sort of strings
     * 
     *     The callback function should accept two parameters elem1 and elem2 and return an integer:
     *     Return integer < 0 if elem1 less than elem2
     *     Return 0 is elem1 is equal to elem2
     *     Return > 0 if elem1 greater than elem2
     * @param Key Optional: Omit it if you want to sort a array of primitive values (strings, numbers etc).
     *     If you have an array of objects, specify here the key by which contents the object will be sorted.
     * @returns {Array}
     */
    static SortArray(arr, optionsOrCallback:="N", key?) {
        static sizeofFieldType := 16 ; Same on both 32-bit and 64-bit
        if HasMethod(optionsOrCallback)
            pCallback := CallbackCreate(CustomCompare.Bind(optionsOrCallback), "F Cdecl", 2), optionsOrCallback := ""
        else {
            if InStr(optionsOrCallback, "N")
                pCallback := CallbackCreate(IsSet(key) ? NumericCompareKey.Bind(key) : NumericCompare, "F CDecl", 2)
            if RegExMatch(optionsOrCallback, "i)C(?!0)|C1|COn")
                pCallback := CallbackCreate(IsSet(key) ? StringCompareKey.Bind(key,,True) : StringCompare.Bind(,,True), "F CDecl", 2)
            if RegExMatch(optionsOrCallback, "i)C0|COff")
                pCallback := CallbackCreate(IsSet(key) ? StringCompareKey.Bind(key) : StringCompare, "F CDecl", 2)
            if InStr(optionsOrCallback, "Random")
                pCallback := CallbackCreate(RandomCompare, "F CDecl", 2)
            if !IsSet(pCallback)
                throw ValueError("No valid options provided!", -1)
        }
        mFields := NumGet(ObjPtr(arr) + (8 + (VerCompare(A_AhkVersion, "<2.1-") > 0 ? 3 : 5)*A_PtrSize), "Ptr") ; in v2.0: 0 is VTable. 2 is mBase, 3 is mFields, 4 is FlatVector, 5 is mLength and 6 is mCapacity
        DllCall("msvcrt.dll\qsort", "Ptr", mFields, "UInt", arr.Length, "UInt", sizeofFieldType, "Ptr", pCallback, "Cdecl")
        CallbackFree(pCallback)
        if RegExMatch(optionsOrCallback, "i)R(?!a)")
            this.ReverseArray(arr)
        if InStr(optionsOrCallback, "U")
            arr := this.Unique(arr)
        return arr

        CustomCompare(compareFunc, pFieldType1, pFieldType2) => (ValueFromFieldType(pFieldType1, &fieldValue1), ValueFromFieldType(pFieldType2, &fieldValue2), compareFunc(fieldValue1, fieldValue2))
        NumericCompare(pFieldType1, pFieldType2) => (ValueFromFieldType(pFieldType1, &fieldValue1), ValueFromFieldType(pFieldType2, &fieldValue2), fieldValue1 - fieldValue2)
        NumericCompareKey(key, pFieldType1, pFieldType2) => (ValueFromFieldType(pFieldType1, &fieldValue1), ValueFromFieldType(pFieldType2, &fieldValue2), fieldValue1.%key% - fieldValue2.%key%)
        StringCompare(pFieldType1, pFieldType2, casesense := False) => (ValueFromFieldType(pFieldType1, &fieldValue1), ValueFromFieldType(pFieldType2, &fieldValue2), StrCompare(fieldValue1 "", fieldValue2 "", casesense))
        StringCompareKey(key, pFieldType1, pFieldType2, casesense := False) => (ValueFromFieldType(pFieldType1, &fieldValue1), ValueFromFieldType(pFieldType2, &fieldValue2), StrCompare(fieldValue1.%key% "", fieldValue2.%key% "", casesense))
        RandomCompare(pFieldType1, pFieldType2) => (Random(0, 1) ? 1 : -1)

        ValueFromFieldType(pFieldType, &fieldValue?) {
            static SYM_STRING := 0, PURE_INTEGER := 1, PURE_FLOAT := 2, SYM_MISSING := 3, SYM_OBJECT := 5
            switch SymbolType := NumGet(pFieldType + 8, "Int") {
                case PURE_INTEGER: fieldValue := NumGet(pFieldType, "Int64") 
                case PURE_FLOAT: fieldValue := NumGet(pFieldType, "Double") 
                case SYM_STRING: fieldValue := StrGet(NumGet(pFieldType, "Ptr")+2*A_PtrSize)
                case SYM_OBJECT: fieldValue := ObjFromPtrAddRef(NumGet(pFieldType, "Ptr")) 
                case SYM_MISSING: return		
            }
        }
    }
    ; Reverses the array in-place
    static ReverseArray(arr) {
        local len := arr.Length + 1, max := (len // 2), i := 0
        while ++i <= max
            temp := arr[len - i], arr[len - i] := arr[i], arr[i] := temp
        return arr
    }
    ; Returns a new array with only unique values
    static UniqueArray(arr) {
        local unique := Map()
        for v in arr
            unique[v] := 1
        return [unique*]
    }

    ; Returns a one-dimensional array from a multi-dimensional array
    static FlattenArray(arr) {
        local r := []
        for v in arr {
            if v is Array
                r.Push(this.FlattenArray(v)*)
            else
                r.Push(v)
        }
        return r
    }

    ;; Only internal methods ahead

    ; Scales and optionally crops a SoftwareBitmap. Crop parameters need to not be scale-adjusted.
    ; Rotation can be clockwise 0, 90, 180, or 270 degrees
    ; Flip: 0 = no flip, 1 = around y-axis, 2 = around x-axis
    static TransformSoftwareBitmap(SoftwareBitmap, &sbW, &sbH, scale:=1, rotate:=0, flip:=0, X?, Y?, W?, H?) {
        InMemoryRandomAccessStream := this.SoftwareBitmapToRandomAccessStream(SoftwareBitmap)

        ComCall(this.Vtbl_GetDecoder.png, this.BitmapDecoderStatics, "ptr", DecoderGUID:=Buffer(16))
        ComCall(15, this.BitmapDecoderStatics, "ptr", DecoderGUID, "ptr", InMemoryRandomAccessStream, "ptr*", BitmapDecoder:=ComValue(13,0))   ; CreateAsync
        this.WaitForAsync(&BitmapDecoder)

        BitmapFrameWithSoftwareBitmap := ComObjQuery(BitmapDecoder, IBitmapFrameWithSoftwareBitmap := "{FE287C9A-420C-4963-87AD-691436E08383}")
        BitmapFrame := ComObjQuery(BitmapDecoder, IBitmapFrame := "{72A49A1C-8081-438D-91BC-94ECFC8185C6}")

        BitmapTransform := this.CreateClass("Windows.Graphics.Imaging.BitmapTransform")

        if IsSet(W) && W
            sbW := Min(sbW, W)
        if IsSet(H) && H
            sbH := Min(sbH, H)
        local sW := Floor(sbW*scale), sH := Floor(sbH*scale), intermediate
        if scale != 1 {
            ; First the bitmap is scaled, then cropped
            ComCall(7, BitmapTransform, "uint", sW) ; put_ScaledWidth
            ComCall(9, BitmapTransform, "uint", sH) ; put_ScaledHeight
        }
        if rotate {
            ComCall(15, BitmapTransform, "uint", rotate//90) ; put_Rotation
            if rotate = 90 || rotate = 270
                intermediate := sW, sW := sH, sH := intermediate
        }
        if flip
            ComCall(13, BitmapTransform, "uint", flip) ; put_Flip

        if IsSet(X) && (X != 0 || Y != 0)  {
            bounds := Buffer(16,0), NumPut("int", Floor(X*scale), "int", Floor(Y*scale), "int", Floor(sbW*scale), "int", Floor(sbH*scale), bounds)
            ComCall(17, BitmapTransform, "ptr", bounds) ; put_Bounds
        }
        ComCall(8, BitmapFrame, "uint*", &BitmapPixelFormat:=0) ; get_BitmapPixelFormat
        ComCall(9, BitmapFrame, "uint*", &BitmapAlphaMode:=0) ; get_BitmapAlphaMode
        ComCall(8, BitmapFrameWithSoftwareBitmap, "uint", BitmapPixelFormat, "uint", BitmapAlphaMode, "ptr", BitmapTransform, "uint", IgnoreExifOrientation := 0, "uint", DoNotColorManage := 0, "ptr*", SoftwareBitmap:=ComValue(13,0)) ; GetSoftwareBitmapTransformedAsync

        this.WaitForAsync(&SoftwareBitmap)
        ; this.CloseIClosable(BitmapFrameWithSoftwareBitmap) ; Implemented, but is it necessary?
        this.CloseIClosable(InMemoryRandomAccessStream)
        sbW := sW, sbH := sH
        return SoftwareBitmap
    }

    static CreateDIBSection(w, h, hdc?, bpp:=32, &ppvBits:=0) {
        local hdc2 := IsSet(hdc) ? hdc : DllCall("GetDC", "Ptr", 0, "UPtr")
        , bi := Buffer(40, 0), hbm
        NumPut("int", 40, "int", w, "int", h, "ushort", 1, "ushort", bpp, "int", 0, bi)
        hbm := DllCall("CreateDIBSection", "uint", hdc2, "ptr" , bi, "uint" , 0, "uint*", &ppvBits:=0, "uint" , 0, "uint" , 0)
        if !IsSet(hdc)
            DllCall("ReleaseDC", "Ptr", 0, "Ptr", hdc2)
        return hbm
    }

    /**
     * Creates an hBitmap of a region of the screen or a specific window
     * @param X Captured rectangle X coordinate. This is relative to the screen unless hWnd is specified,
     *  in which case it may be relative to the window/client
     * @param Y Captured rectangle Y coordinate.
     * @param W Captured rectangle width.
     * @param H Captured rectangle height.
     * @param {Integer|Object} hWnd Window handle which to capture. Coordinates will be relative to the window. 
     *  hWnd may also be an object {hWnd, onlyClientArea, mode} where onlyClientArea:1 means the client area will be captured instead of the whole window (and X, Y will also be relative to client)
     *  mode 0 uses GetDC + StretchBlt, mode 1 uses PrintWindow, mode 2 uses PrintWindow with undocumented PW_RENDERFULLCONTENT flag. 
     *  Default is mode 2.
     * @param {Integer} scale 
     * @returns {OCR.IBase} 
     */
    static CreateHBitmap(X, Y, W, H, hWnd:=0, scale:=1) {
        local sW := Ceil(W*scale), sH := Ceil(H*scale), onlyClientArea := 0, mode := 2, HDC, obm, hbm, pdc, hbm2
        if hWnd {
            if IsObject(hWnd)
                onlyClientArea := hWnd.HasOwnProp("onlyClientArea") ? hWnd.onlyClientArea : onlyClientArea, mode := hWnd.HasOwnProp("mode") ? hWnd.mode : mode, hWnd := hWnd.hWnd
            HDC := DllCall("GetDCEx", "Ptr", hWnd, "Ptr", 0, "Int", 2|!onlyClientArea, "Ptr")
            if mode > 0 {
                PDC := DllCall("CreateCompatibleDC", "Ptr", 0, "Ptr")
                HBM := DllCall("CreateCompatibleBitmap", "Ptr", HDC, "Int", Max(40,X+W), "Int", Max(40,Y+H), "Ptr")
                , OBM := DllCall("SelectObject", "Ptr", PDC, "Ptr", HBM, "Ptr")
                , DllCall("PrintWindow", "Ptr", hWnd, "Ptr", PDC, "UInt", (mode=2?2:0)|!!onlyClientArea)
                if scale != 1 || X != 0 || Y != 0 {
                    PDC2 := DllCall("CreateCompatibleDC", "Ptr", PDC, "Ptr")
                    , HBM2 := DllCall("CreateCompatibleBitmap", "Ptr", PDC, "Int", Max(40,sW), "Int", Max(40,sH), "Ptr")
                    , OBM2 := DllCall("SelectObject", "Ptr", PDC2, "Ptr", HBM2, "Ptr")
                    , PrevStretchBltMode := DllCall("SetStretchBltMode", "Ptr", PDC, "Int", 3, "Int") ; COLORONCOLOR
                    , DllCall("StretchBlt", "Ptr", PDC2, "Int", 0, "Int", 0, "Int", sW, "Int", sH, "Ptr", PDC, "Int", X, "Int", Y, "Int", W, "Int", H, "UInt", 0x00CC0020 | this.CAPTUREBLT) ; SRCCOPY
                    , DllCall("SetStretchBltMode", "Ptr", PDC, "Int", PrevStretchBltMode)
                    , DllCall("SelectObject", "Ptr", PDC2, "Ptr", obm2)
                    , DllCall("DeleteDC", "Ptr", PDC)
                    , DllCall("DeleteObject", "UPtr", HBM)
                    , hbm := hbm2, pdc := pdc2
                }
                DllCall("SelectObject", "Ptr", PDC, "Ptr", OBM)
                , DllCall("DeleteDC", "Ptr", HDC)
                , oHBM := this.IBase(HBM), oHBM.DC := PDC
                return oHBM.DefineProp("__Delete", {call:(this, *)=>(DllCall("DeleteObject", "Ptr", this), DllCall("DeleteDC", "Ptr", this.DC))})
            }
        } else {
            HDC := DllCall("GetDC", "Ptr", 0, "Ptr")
        }
        PDC := DllCall("CreateCompatibleDC", "Ptr", HDC, "Ptr")
        , HBM := DllCall("CreateCompatibleBitmap", "Ptr", HDC, "Int", Max(40,sW), "Int", Max(40,sH), "Ptr")
        , OBM := DllCall("SelectObject", "Ptr", PDC, "Ptr", HBM, "Ptr")
        if sW < 40 || sH < 40 ; Fills the bitmap so it's at least 40x40, which seems to improve recognition
            DllCall("StretchBlt", "Ptr", PDC, "Int", 0, "Int", 0, "Int", Max(40,sW), "Int", Max(40,sH), "Ptr", HDC, "Int", X, "Int", Y, "Int", 1, "Int", 1, "UInt", 0x00CC0020 | this.CAPTUREBLT) ; SRCCOPY. 
        PrevStretchBltMode := DllCall("SetStretchBltMode", "Ptr", PDC, "Int", 3, "Int") ; COLORONCOLOR
        , DllCall("StretchBlt", "Ptr", PDC, "Int", 0, "Int", 0, "Int", sW, "Int", sH, "Ptr", HDC, "Int", X, "Int", Y, "Int", W, "Int", H, "UInt", 0x00CC0020 | this.CAPTUREBLT) ; SRCCOPY
        , DllCall("SetStretchBltMode", "Ptr", PDC, "Int", PrevStretchBltMode)
        , DllCall("SelectObject", "Ptr", PDC, "Ptr", OBM)
        , DllCall("DeleteDC", "Ptr", HDC)
        , oHBM := this.IBase(HBM), oHBM.DC := PDC
        return oHBM.DefineProp("__Delete", {call:(this, *)=>(DllCall("DeleteObject", "Ptr", this), DllCall("DeleteDC", "Ptr", this.DC))})
    }

    static CreateDirect3DSoftwareBitmapFromWindow(hWnd) {
        static init := 0, DXGIDevice, Direct3DDevice, Direct3D11CaptureFramePoolStatics, GraphicsCaptureItemInterop, GraphicsCaptureItemGUID, D3D_Device, D3D_Context
        local x, y, w, h, rect
        if !init {
            DllCall("LoadLibrary","str","DXGI")
            DllCall("LoadLibrary","str","D3D11")
            DllCall("LoadLibrary","str","Dwmapi")
            DllCall("D3D11\D3D11CreateDevice", "ptr", 0, "int", D3D_DRIVER_TYPE_HARDWARE := 1, "ptr", 0, "uint", D3D11_CREATE_DEVICE_BGRA_SUPPORT := 0x20, "ptr", 0, "uint", 0, "uint", D3D11_SDK_VERSION := 7, "ptr*", D3D_Device:=ComValue(13, 0), "ptr*", 0, "ptr*", D3D_Context:=ComValue(13, 0))
            DXGIDevice := ComObjQuery(D3D_Device, IID_IDXGIDevice := "{54ec77fa-1377-44e6-8c32-88fd5f44c84c}")
            DllCall("D3D11\CreateDirect3D11DeviceFromDXGIDevice", "ptr", DXGIDevice, "ptr*", GraphicsDevice:=ComValue(13, 0))
            Direct3DDevice := ComObjQuery(GraphicsDevice, IDirect3DDevice := "{A37624AB-8D5F-4650-9D3E-9EAE3D9BC670}")
            Direct3D11CaptureFramePoolStatics := this.CreateClass("Windows.Graphics.Capture.Direct3D11CaptureFramePool", IDirect3D11CaptureFramePoolStatics := "{7784056a-67aa-4d53-ae54-1088d5a8ca21}")
            GraphicsCaptureItemStatics := this.CreateClass("Windows.Graphics.Capture.GraphicsCaptureItem", IGraphicsCaptureItemStatics := "{A87EBEA5-457C-5788-AB47-0CF1D3637E74}")
            GraphicsCaptureItemInterop := ComObjQuery(GraphicsCaptureItemStatics, IGraphicsCaptureItemInterop := "{3628E81B-3CAC-4C60-B7F4-23CE0E0C3356}")
            GraphicsCaptureItemGUID := Buffer(16,0)
            DllCall("ole32\CLSIDFromString", "wstr", IGraphicsCaptureItem := "{79c3f95b-31f7-4ec2-a464-632ef5d30760}", "ptr", GraphicsCaptureItemGUID)
            init := 1
        }
        ; INIT done

        DllCall("Dwmapi.dll\DwmGetWindowAttribute", "ptr", hWnd, "uint", DWMWA_EXTENDED_FRAME_BOUNDS := 9, "ptr", rect := Buffer(16,0), "uint", 16)
        x := NumGet(rect, 0, "int"), y := NumGet(rect, 4, "int"), w := NumGet(rect, 8, "int") - x, h := NumGet(rect, 12, "int") - y
        ComCall(6, Direct3D11CaptureFramePoolStatics, "ptr", Direct3DDevice, "int", B8G8R8A8UIntNormalized := 87, "int", numberOfBuffers := 2, "int64", (h << 32) | w, "ptr*", Direct3D11CaptureFramePool:=ComValue(13, 0))   ; Direct3D11CaptureFramePool.Create
        if ComCall(3, GraphicsCaptureItemInterop, "ptr", hWnd, "ptr", GraphicsCaptureItemGUID, "ptr*", GraphicsCaptureItem:=ComValue(13, 0), "uint") {   ; IGraphicsCaptureItemInterop::CreateForWindow
            this.CloseIClosable(Direct3D11CaptureFramePool)
            throw Error("Failed to capture GraphicsItem of window",, -1)
        }
        ComCall(10, Direct3D11CaptureFramePool, "ptr", GraphicsCaptureItem, "ptr*", GraphicsCaptureSession:=ComValue(13, 0))   ; Direct3D11CaptureFramePool.CreateCaptureSession

        GraphicsCaptureSession2 := ComObjQuery(GraphicsCaptureSession, IGraphicsCaptureSession2 := "{2c39ae40-7d2e-5044-804e-8b6799d4cf9e}")
        ComCall(7, GraphicsCaptureSession2, "int", 0)   ; GraphicsCaptureSession.IsCursorCaptureEnabled put

        if (Integer(StrSplit(A_OSVersion, ".")[3]) >= 20348) { ; hide border
            GraphicsCaptureSession3 := ComObjQuery(GraphicsCaptureSession, IGraphicsCaptureSession3 := "{f2cdd966-22ae-5ea1-9596-3a289344c3be}")
            ComCall(7, GraphicsCaptureSession3, "int", 0)   ; GraphicsCaptureSession.IsBorderRequired put
        }
        ComCall(6, GraphicsCaptureSession)   ; GraphicsCaptureSession.StartCapture
        Loop {
            ComCall(7, Direct3D11CaptureFramePool, "ptr*", Direct3D11CaptureFrame:=ComValue(13, 0))   ; Direct3D11CaptureFramePool.TryGetNextFrame
            if (Direct3D11CaptureFrame.ptr != 0)
                break
        }
        ComCall(6, Direct3D11CaptureFrame, "ptr*", Direct3DSurface:=ComValue(13, 0))   ; Direct3D11CaptureFrame.Surface

        ComCall(11, this.SoftwareBitmapStatics, "ptr", Direct3DSurface, "ptr*", SoftwareBitmap:=ComValue(13, 0)) ; SoftwareBitmap::CreateCopyFromSurfaceAsync
        this.WaitForAsync(&SoftwareBitmap)

        this.CloseIClosable(Direct3D11CaptureFramePool)
        this.CloseIClosable(GraphicsCaptureSession)
        if GraphicsCaptureSession2 {
            this.CloseIClosable(GraphicsCaptureSession2)
        }
        if IsSet(GraphicsCaptureSession3) {
            this.CloseIClosable(GraphicsCaptureSession3)
        }
        this.CloseIClosable(Direct3D11CaptureFrame)
        this.CloseIClosable(Direct3DSurface)

        SoftwareBitmap.x := x, SoftwareBitmap.y := y, SoftwareBitmap.w := w, SoftwareBitmap.h := h
        return SoftwareBitmap
    }

    static HBitmapToRandomAccessStream(hBitmap) {
        static PICTYPE_BITMAP := 1
             , BSOS_DEFAULT   := 0
             , sz := 8 + A_PtrSize*2
        local PICTDESC, riid, size, pIRandomAccessStream
             
        DllCall("Ole32\CreateStreamOnHGlobal", "Ptr", 0, "UInt", true, "Ptr*", pIStream:=ComValue(13,0), "UInt")
        , PICTDESC := Buffer(sz, 0)
        , NumPut("uint", sz, "uint", PICTYPE_BITMAP, "ptr", IsInteger(hBitmap) ? hBitmap : hBitmap.ptr, PICTDESC)
        , riid := this.CLSIDFromString(this.IID_IPicture)
        , DllCall("OleAut32\OleCreatePictureIndirect", "Ptr", PICTDESC, "Ptr", riid, "UInt", 0, "Ptr*", pIPicture:=ComValue(13,0), "UInt")
        , ComCall(15, pIPicture, "Ptr", pIStream, "UInt", true, "uint*", &size:=0, "UInt") ; IPicture::SaveAsFile
        , riid := this.CLSIDFromString(this.IID_IRandomAccessStream)
        , DllCall("ShCore\CreateRandomAccessStreamOverStream", "Ptr", pIStream, "UInt", BSOS_DEFAULT, "Ptr", riid, "Ptr*", pIRandomAccessStream:=ComValue(13, 0), "UInt")
        Return pIRandomAccessStream
    }

    ; Converts HBITMAP to SoftwareBitmap. NOTE: SetStretchBltMode HALFTONE breaks this
    ; The optional transform parameter may contain {grayscale, invertcolors}
    static HBitmapToSoftwareBitmap(hBitmap, hDC?, transform?) {
        local bi := Buffer(40, 0), W, H, BitmapBuffer, MemoryBuffer, MemoryBufferReference, BufferByteAccess, BufferSize
        hDC := (hBitmap is OCR.IBase ? hBitmap.DC : (hDC ?? dhDC := DllCall("GetDC", "Ptr", 0, "UPtr")))

        NumPut("uint", 40, bi, 0)
        DllCall("GetDIBits", "ptr", hDC, "ptr", hBitmap, "uint", 0, "uint", 0, "ptr", 0, "ptr", bi, "uint", 0)
        W := NumGet(bi, 4, "int"), H := NumGet(bi, 8, "int")

        ComCall(7, this.SoftwareBitmapFactory, "int", 87, "int", W, "int", H, "int", 0, "ptr*", SoftwareBitmap := ComValue(13,0)) ; CreateWithAlpha: Bgra8 & Premultiplied
        ComCall(15, SoftwareBitmap, "int", 2, "ptr*", &BitmapBuffer := 0) ; LockBuffer
        MemoryBuffer := ComObjQuery(BitmapBuffer, "{fbc4dd2a-245b-11e4-af98-689423260cf8}")
        ComCall(6, MemoryBuffer, "ptr*", &MemoryBufferReference := 0) ; CreateReference
        BufferByteAccess := ComObjQuery(MemoryBufferReference, "{5b0d3235-4dba-4d44-865e-8f1d0e4fd04d}")
        ComCall(3, BufferByteAccess, "ptr*", &SoftwareBitmapByteBuffer:=0, "uint*", &BufferSize:=0) ; GetBuffer

        NumPut("short", 32, "short", 0, bi, 14), NumPut("int", -H, bi, 8) ; Negative height to get correctly oriented image
        DllCall("GetDIBits", "ptr", hDC, "ptr", hBitmap, "uint", 0, "uint", H, "ptr", SoftwareBitmapByteBuffer, "ptr", bi, "uint", 0)
        if IsSet(transform) {
            if (transform.HasProp("grayscale") && transform.grayscale)
                DllCall(this.GrayScaleMCode, "ptr", SoftwareBitmapByteBuffer, "uint", w, "uint", h, "uint", (w*4+3) // 4 * 4, "cdecl uint")
            if (transform.HasProp("monochrome") && transform.monochrome)
                DllCall(this.MonochromeMCode, "ptr", SoftwareBitmapByteBuffer, "uint", w, "uint", h, "uint", (w*4+3) // 4 * 4, "uint", transform.monochrome, "cdecl uint")
            if (transform.HasProp("invertcolors") && transform.invertcolors)
                DllCall(this.InvertColorsMCode, "ptr", SoftwareBitmapByteBuffer, "uint", w, "uint", h, "uint", (w*4+3) // 4 * 4, "cdecl uint")
        }
        
        if IsSet(dhDC)
            DllCall("DeleteDC", "ptr", dhDC)
        BufferByteAccess := "", ObjRelease(MemoryBufferReference), MemoryBuffer := "", ObjRelease(BitmapBuffer) ; Release in correct order

        return SoftwareBitmap
    }

    static MCode(mcode) {
        static e := Map('1', 4, '2', 1), c := (A_PtrSize=8) ? "x64" : "x86"
        if (!regexmatch(mcode, "^([0-9]+),(" c ":|.*?," c ":)([^,]+)", &m))
          return
        if (!DllCall("crypt32\CryptStringToBinary", "str", m.3, "uint", 0, "uint", e[m.1], "ptr", 0, "uint*", &s := 0, "ptr", 0, "ptr", 0))
          return
        p := DllCall("GlobalAlloc", "uint", 0, "ptr", s, "ptr")
        if (c="x64")
          DllCall("VirtualProtect", "ptr", p, "ptr", s, "uint", 0x40, "uint*", &op := 0)
        if (DllCall("crypt32\CryptStringToBinary", "str", m.3, "uint", 0, "uint", e[m.1], "ptr", p, "uint*", &s, "ptr", 0, "ptr", 0))
          return p
        DllCall("GlobalFree", "ptr", p)
      }

    static DisplayHBitmap(hBitmap) {
        local gImage := Gui("-DPIScale"), W, H
        , hPic := gImage.Add("Text", "0xE w640 h640")
        SendMessage(0x172, 0, hBitmap,, hPic.hWnd)
        hPic.GetPos(,,&W, &H)
        gImage.Show("w" (W+20) " H" (H+20))
        WinWaitClose gImage
    }

    static SoftwareBitmapToRandomAccessStream(SoftwareBitmap) {
        InMemoryRandomAccessStream := this.CreateClass("Windows.Storage.Streams.InMemoryRandomAccessStream")
        ComCall(8, this.BitmapEncoderStatics, "ptr", encoderId := Buffer(16, 0)) ; IBitmapEncoderStatics::PngEncoderId
        ComCall(13, this.BitmapEncoderStatics, "ptr", encoderId, "ptr", InMemoryRandomAccessStream, "ptr*", BitmapEncoder:=ComValue(13,0)) ; IBitmapEncoderStatics::CreateAsync
        this.WaitForAsync(&BitmapEncoder)
        BitmapEncoderWithSoftwareBitmap := ComObjQuery(BitmapEncoder, "{686cd241-4330-4c77-ace4-0334968b1768}")
        ComCall(6, BitmapEncoderWithSoftwareBitmap, "ptr", SoftwareBitmap) ; SetSoftwareBitmap
        ComCall(19, BitmapEncoder, "ptr*", asyncAction:=ComValue(13,0)) ; FlushAsync
        this.WaitForAsync(&asyncAction)
        ComCall(11, InMemoryRandomAccessStream, "int64", 0) ; Seek to beginning
        return InMemoryRandomAccessStream
    }

    static CreateClass(str, interface?) {
        local hString := this.CreateHString(str), result
        if !IsSet(interface) {
            result := DllCall("Combase.dll\RoActivateInstance", "ptr", hString, "ptr*", cls:=ComValue(13, 0), "uint")
        } else {
            GUID := this.CLSIDFromString(interface)
            result := DllCall("Combase.dll\RoGetActivationFactory", "ptr", hString, "ptr", GUID, "ptr*", cls:=ComValue(13, 0), "uint")
        }
        if (result != 0) {
            if (result = 0x80004002)
                throw Error("No such interface supported", -1, interface)
            else if (result = 0x80040154)
                throw Error("Class not registered", -1)
            else
                throw Error(result)
        }
        this.DeleteHString(hString)
        return cls
    }
    
    static CreateHString(str) => (DllCall("Combase.dll\WindowsCreateString", "wstr", str, "uint", StrLen(str), "ptr*", &hString:=0), hString)
    
    static DeleteHString(hString) => DllCall("Combase.dll\WindowsDeleteString", "ptr", hString)
    
    static WaitForAsync(&obj) {
        local AsyncInfo := ComObjQuery(obj, this.IID_IAsyncInfo), status, ErrorCode
        Loop {
            ComCall(7, AsyncInfo, "uint*", &status:=0)   ; IAsyncInfo.Status
            if (status != 0) {
                if (status != 1) {
                    ComCall(8, ASyncInfo, "uint*", &ErrorCode:=0)   ; IAsyncInfo.ErrorCode
                    throw Error("AsyncInfo failed with status error " ErrorCode, -1)
                }
                break
            }
            Sleep this.PerformanceMode ? -1 : 0
        }
        ComCall(8, obj, "ptr*", ObjectResult:=this.IBase())   ; GetResults
        obj := ObjectResult
    }

    static CloseIClosable(pClosable) {
        static IClosable := "{30D5A829-7FA4-4026-83BB-D75BAE4EA99E}"
        local Close := ComObjQuery(pClosable, IClosable)
        ComCall(6, Close)   ; Close
    }

    static CLSIDFromString(IID) {
        local CLSID := Buffer(16), res
        if res := DllCall("ole32\CLSIDFromString", "WStr", IID, "Ptr", CLSID, "UInt")
           throw Error("CLSIDFromString failed. Error: " . Format("{:#x}", res))
        Return CLSID
    }

    static NormalizeCoordinates(result, scale, x:=0, y:=0) {
        local word
        if (scale == 1 && x == 0 && y == 0)
            return result
        for word in result.Words
            word.x := Integer(word.x / scale)+x, word.y := Integer(word.y / scale)+y, word.w := Integer(word.w / scale), word.h := Integer(word.h / scale), word.BoundingRect := {X:word.x, Y:word.y, W:word.w, H:word.h}
        return result
    }
    
    static __OpenPdfDocument(IRandomAccessStream, Password:="") {
        PdfDocumentStatics := this.CreateClass("Windows.Data.Pdf.PdfDocument", this.IID_IPdfDocumentStatics)
        ComCall(8, PdfDocumentStatics, "ptr", IRandomAccessStream, "ptr*", PdfDocument:=ComValue(13, 0)) ; LoadFromStreamAsync
        this.WaitForAsync(&PdfDocument)
        return PdfDocument
    }

    static __ExtractNamedParameters(obj, params*) {
        local i := 0
        if !IsObject(obj) || Type(obj) != "Object"
            return 0
        Loop params.Length // 2 {
            name := params[++i], value := params[++i]
            if obj.HasProp(name)
                %value% := obj.%name%
        }
        return 1
    }

    static __ExtractTransformParameters(obj, &transform) {
        local scale := 1, grayscale := 0, invertcolors := 0, monochrome := 0, rotate := 0, flip := 0
        if IsObject(obj)
            this.__ExtractNamedParameters(obj, "scale", &scale, "grayscale", &grayscale, "invertcolors", &invertcolors, "monochrome", &monochrome, "rotate", &rotate, "flip", &flip, "transform", &transform)

        if IsSet(transform) && IsObject(transform) {
            for prop in ["scale", "grayscale", "invertcolors", "monochrome", "rotate", "flip"]
                if !transform.HasProp(prop)
                    transform.%prop% := %prop%
        } else
            transform := {scale:scale, grayscale:grayscale, invertcolors:invertcolors, monochrome:monochrome, rotate:rotate, flip:flip}
    
        transform.flip := transform.flip = "y" ? 1 : transform.flip = "x" ? 2 : transform.flip
    }

    static __DeleteProps(obj, props*) {
        if IsObject(obj)
            for prop in props
                obj.DeleteProp(prop)
    }

    /**
     * Converts coordinates between screen, window and client.
     * @param X X-coordinate to convert
     * @param Y Y-coordinate to convert
     * @param outX Variable where to store the converted X-coordinate
     * @param outY Variable where to store the converted Y-coordinate
     * @param relativeFrom CoordMode where to convert from. Default is A_CoordModeMouse.
     * @param relativeTo CoordMode where to convert to. Default is Screen.
     * @param winTitle A window title or other criteria identifying the target window. 
     * @param winText If present, this parameter must be a substring from a single text element of the target window.
     * @param excludeTitle Windows whose titles include this value will not be considered.
     * @param excludeText Windows whose text include this value will not be considered.
     */
    static ConvertWinPos(X, Y, &outX, &outY, relativeFrom:="", relativeTo:="screen", winTitle?, winText?, excludeTitle?, excludeText?) {
        relativeFrom := relativeFrom || A_CoordModeMouse
        if relativeFrom = relativeTo {
            outX := X, outY := Y
            return
        }
        local hWnd := WinExist(winTitle?, winText?, excludeTitle?, excludeText?)

        switch relativeFrom, 0 {
            case "screen", "s":
                if relativeTo = "window" || relativeTo = "w" {
                    DllCall("user32\GetWindowRect", "Int", hWnd, "Ptr", RECT := Buffer(16))
                    outX := X-NumGet(RECT, 0, "Int"), outY := Y-NumGet(RECT, 4, "Int")
                } else { 
                    ; screen to client
                    pt := Buffer(8), NumPut("int",X,pt), NumPut("int",Y,pt,4)
                    DllCall("ScreenToClient", "Int", hWnd, "Ptr", pt)
                    outX := NumGet(pt,0,"int"), outY := NumGet(pt,4,"int")
                }
            case "window", "w":
                ; window to screen
                WinGetPos(&outX, &outY,,,hWnd)
                outX += X, outY += Y
                if relativeTo = "client" || relativeTo = "c" {
                    ; screen to client
                    pt := Buffer(8), NumPut("int",outX,pt), NumPut("int",outY,pt,4)
                    DllCall("ScreenToClient", "Int", hWnd, "Ptr", pt)
                    outX := NumGet(pt,0,"int"), outY := NumGet(pt,4,"int")
                }
            case "client", "c":
                ; client to screen
                pt := Buffer(8), NumPut("int",X,pt), NumPut("int",Y,pt,4)
                DllCall("ClientToScreen", "Int", hWnd, "Ptr", pt)
                outX := NumGet(pt,0,"int"), outY := NumGet(pt,4,"int")
                if relativeTo = "window" || relativeTo = "w" { ; screen to window
                    DllCall("user32\GetWindowRect", "Int", hWnd, "Ptr", RECT := Buffer(16))
                    outX -= NumGet(RECT, 0, "Int"), outY -= NumGet(RECT, 4, "Int")
                }
        }
    }
}

; Still sane, Exile?